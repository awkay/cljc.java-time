(ns cljc.java-time.period (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Period]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Period])))
(def zero (. java.time.Period -ZERO))
(clojure.core/defn get-months {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this1832] (jti/getter months this1832)))
(clojure.core/defn of-weeks {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int1833] (. java.time.Period ofWeeks int1833)))
(clojure.core/defn of-days {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int1834] (. java.time.Period ofDays int1834)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this1835] (.isNegative this1835)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int"]))} (^java.time.Period [^java.lang.Integer int1836 ^java.lang.Integer int1837 ^java.lang.Integer int1838] (. java.time.Period of int1836 int1837 int1838)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Period"]))} (^java.lang.Boolean [^java.time.Period this1839] (.isZero this1839)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Period" "int"] ["java.time.Period" "int"]))} (^java.lang.Object [this1840 G__1841] #? (:cljs (.multipliedBy ^java.time.Period this1840 G__1841) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__1841)) (clojure.core/let [G__1841 ^"java.lang.Integer" G__1841] (.multipliedBy ^java.time.Period this1840 G__1841)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__1841)) (clojure.core/let [G__1841 ^"java.lang.Integer" G__1841] (.multipliedBy ^java.time.Period this1840 G__1841)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-units {:arglists (quote (["java.time.Period"]))} (^java.util.List [^java.time.Period this1842] (jti/getter units this1842)))
(clojure.core/defn with-days {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this1843 ^java.lang.Integer int1844] (.withDays this1843 int1844)))
(clojure.core/defn plus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this1845 G__1846] #? (:cljs (.plus ^java.time.Period this1845 G__1846) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__1846)) (clojure.core/let [G__1846 ^"java.time.temporal.TemporalAmount" G__1846] (.plus ^java.time.Period this1845 G__1846)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__1846)) (clojure.core/let [G__1846 ^"java.time.temporal.TemporalAmount" G__1846] (.plus ^java.time.Period this1845 G__1846)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-months {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int1847] (. java.time.Period ofMonths int1847)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Period"]))} (^java.lang.String [^java.time.Period this1848] (.toString this1848)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this1849 ^long long1850] (.plusMonths this1849 long1850)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this1851 ^long long1852] (.minusMonths this1851 long1852)))
(clojure.core/defn minus {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalAmount"] ["java.time.Period" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this1853 G__1854] #? (:cljs (.minus ^java.time.Period this1853 G__1854) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__1854)) (clojure.core/let [G__1854 ^"java.time.temporal.TemporalAmount" G__1854] (.minus ^java.time.Period this1853 G__1854)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__1854)) (clojure.core/let [G__1854 ^"java.time.temporal.TemporalAmount" G__1854] (.minus ^java.time.Period this1853 G__1854)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn add-to {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this1855 ^java.time.temporal.Temporal java-time-temporal-Temporal1856] (.addTo this1855 java-time-temporal-Temporal1856)))
(clojure.core/defn to-total-months {:arglists (quote (["java.time.Period"]))} (^long [^java.time.Period this1857] (.toTotalMonths this1857)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this1858 ^long long1859] (.plusDays this1858 long1859)))
(clojure.core/defn of-years {:arglists (quote (["int"]))} (^java.time.Period [^java.lang.Integer int1860] (. java.time.Period ofYears int1860)))
(clojure.core/defn get-days {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this1861] (jti/getter days this1861)))
(clojure.core/defn negated {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this1862] #? (:cljs (.negated ^java.time.Period this1862) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this1862)) (clojure.core/and) (clojure.core/let [] (.negated ^java.time.Period this1862)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-years {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this1863] (jti/getter years this1863)))
(clojure.core/defn with-years {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this1864 ^java.lang.Integer int1865] (.withYears this1864 int1865)))
(clojure.core/defn normalized {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this1866] #? (:cljs (.normalized ^java.time.Period this1866) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this1866)) (clojure.core/and) (clojure.core/let [] (.normalized ^java.time.Period this1866)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-months {:arglists (quote (["java.time.Period" "int"]))} (^java.time.Period [^java.time.Period this1867 ^java.lang.Integer int1868] (.withMonths this1867 int1868)))
(clojure.core/defn between {:arglists (quote (["java.time.LocalDate" "java.time.LocalDate"]))} (^java.time.Period [^java.time.LocalDate java-time-LocalDate1869 ^java.time.LocalDate java-time-LocalDate1870] (. java.time.Period between java-time-LocalDate1869 java-time-LocalDate1870)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Period [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount1871] (. java.time.Period from java-time-temporal-TemporalAmount1871)))
(clojure.core/defn minus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this1872 ^long long1873] (.minusYears this1872 long1873)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.Period"] ["java.time.Period"]))} (^java.lang.Object [this1874] #? (:cljs (jti/getter chronology ^java.time.Period this1874) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (jti/getter chronology ^java.time.Period this1874)) (clojure.core/and) (clojure.core/let [] (jti/getter chronology ^java.time.Period this1874)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Period [^java.lang.CharSequence java-lang-CharSequence1875] (. java.time.Period parse java-lang-CharSequence1875)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Period"]))} (^java.lang.Integer [^java.time.Period this1876] (.hashCode this1876)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Period" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Period this1877 ^java.time.temporal.Temporal java-time-temporal-Temporal1878] (.subtractFrom this1877 java-time-temporal-Temporal1878)))
(clojure.core/defn get {:arglists (quote (["java.time.Period" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Period this1879 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit1880] (.get this1879 java-time-temporal-TemporalUnit1880)))
(clojure.core/defn equals {:arglists (quote (["java.time.Period" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Period this1881 ^java.lang.Object java-lang-Object1882] (.equals this1881 java-lang-Object1882)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this1883 ^long long1884] (.plusYears this1883 long1884)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Period" "long"]))} (^java.time.Period [^java.time.Period this1885 ^long long1886] (.minusDays this1885 long1886)))
