(ns cljc.java-time.offset-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [OffsetTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time OffsetTime])))
(def min (. java.time.OffsetTime -MIN))
(def max (. java.time.OffsetTime -MAX))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this2253 ^long long2254] (.minusMinutes this2253 long2254)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.time.OffsetTime [^java.time.OffsetTime this2255 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2256] (.truncatedTo this2255 java-time-temporal-TemporalUnit2256)))
(clojure.core/defn range {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.OffsetTime this2257 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2258] (.range this2257 java-time-temporal-TemporalField2258)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this2259] (jti/getter hour this2259)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this2260 ^long long2261] (.minusHours this2260 long2261)))
(clojure.core/defn of {:arglists (quote (["java.time.OffsetTime" "java.time.LocalTime" "java.time.ZoneOffset"] ["java.time.OffsetTime" "int" "int" "int" "int" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.LocalTime java-time-LocalTime2262 ^java.time.ZoneOffset java-time-ZoneOffset2263] (. java.time.OffsetTime of java-time-LocalTime2262 java-time-ZoneOffset2263)) (^java.time.OffsetTime [^java.lang.Integer int2264 ^java.lang.Integer int2265 ^java.lang.Integer int2266 ^java.lang.Integer int2267 ^java.time.ZoneOffset java-time-ZoneOffset2268] (. java.time.OffsetTime of int2264 int2265 int2266 int2267 java-time-ZoneOffset2268)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this2269 ^java.time.OffsetTime java-time-OffsetTime2270] (.isEqual this2269 java-time-OffsetTime2270)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this2271] (jti/getter nano this2271)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this2272 ^long long2273] (.minusSeconds this2272 long2273)))
(clojure.core/defn get-second {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this2274] (jti/getter second this2274)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this2275 ^long long2276] (.plusNanos this2275 long2276)))
(clojure.core/defn plus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this2277 G__2278] #? (:cljs (.plus ^java.time.OffsetTime this2277 G__2278) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2278)) (clojure.core/let [G__2278 ^"java.time.temporal.TemporalAmount" G__2278] (.plus ^java.time.OffsetTime this2277 G__2278)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2278)) (clojure.core/let [G__2278 ^"java.time.temporal.TemporalAmount" G__2278] (.plus ^java.time.OffsetTime this2277 G__2278)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2279 G__2280 G__2281] #? (:cljs (.plus ^java.time.OffsetTime this2279 G__2280 G__2281) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2280) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2281)) (clojure.core/let [G__2280 (clojure.core/long G__2280) G__2281 ^"java.time.temporal.TemporalUnit" G__2281] (.plus ^java.time.OffsetTime this2279 G__2280 G__2281)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2280) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2281)) (clojure.core/let [G__2280 (clojure.core/long G__2280) G__2281 ^"java.time.temporal.TemporalUnit" G__2281] (.plus ^java.time.OffsetTime this2279 G__2280 G__2281)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this2282 ^java.lang.Integer int2283] (.withHour this2282 int2283)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this2284 ^java.lang.Integer int2285] (.withMinute this2284 int2285)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this2286 ^long long2287] (.plusMinutes this2286 long2287)))
(clojure.core/defn query {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.OffsetTime this2288 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery2289] (.query this2288 java-time-temporal-TemporalQuery2289)))
(clojure.core/defn at-date {:arglists (quote (["java.time.OffsetTime" "java.time.LocalDate"]))} (^java.time.OffsetDateTime [^java.time.OffsetTime this2290 ^java.time.LocalDate java-time-LocalDate2291] (.atDate this2290 java-time-LocalDate2291)))
(clojure.core/defn with-offset-same-instant {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this2292 ^java.time.ZoneOffset java-time-ZoneOffset2293] (.withOffsetSameInstant this2292 java-time-ZoneOffset2293)))
(clojure.core/defn to-string {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.String [^java.time.OffsetTime this2294] (.toString this2294)))
(clojure.core/defn is-before {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this2295 ^java.time.OffsetTime java-time-OffsetTime2296] (.isBefore this2295 java-time-OffsetTime2296)))
(clojure.core/defn minus {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "java.time.temporal.TemporalAmount"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.OffsetTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this2297 G__2298] #? (:cljs (.minus ^java.time.OffsetTime this2297 G__2298) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2298)) (clojure.core/let [G__2298 ^"java.time.temporal.TemporalAmount" G__2298] (.minus ^java.time.OffsetTime this2297 G__2298)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2298)) (clojure.core/let [G__2298 ^"java.time.temporal.TemporalAmount" G__2298] (.minus ^java.time.OffsetTime this2297 G__2298)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2299 G__2300 G__2301] #? (:cljs (.minus ^java.time.OffsetTime this2299 G__2300 G__2301) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2300) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2301)) (clojure.core/let [G__2300 (clojure.core/long G__2300) G__2301 ^"java.time.temporal.TemporalUnit" G__2301] (.minus ^java.time.OffsetTime this2299 G__2300 G__2301)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2300) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2301)) (clojure.core/let [G__2300 (clojure.core/long G__2300) G__2301 ^"java.time.temporal.TemporalUnit" G__2301] (.minus ^java.time.OffsetTime this2299 G__2300 G__2301)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this2302 ^long long2303] (.plusHours this2302 long2303)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.LocalTime [^java.time.OffsetTime this2304] (.toLocalTime this2304)))
(clojure.core/defn get-long {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.OffsetTime this2305 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2306] (.getLong this2305 java-time-temporal-TemporalField2306)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.OffsetTime"]))} (^java.time.ZoneOffset [^java.time.OffsetTime this2307] (jti/getter offset this2307)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this2308 ^java.lang.Integer int2309] (.withNano this2308 int2309)))
(clojure.core/defn until {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.OffsetTime this2310 ^java.time.temporal.Temporal java-time-temporal-Temporal2311 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2312] (.until this2310 java-time-temporal-Temporal2311 java-time-temporal-TemporalUnit2312)))
(clojure.core/defn with-offset-same-local {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneOffset"]))} (^java.time.OffsetTime [^java.time.OffsetTime this2313 ^java.time.ZoneOffset java-time-ZoneOffset2314] (.withOffsetSameLocal this2313 java-time-ZoneOffset2314)))
(clojure.core/defn from {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalAccessor"]))} (^java.time.OffsetTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor2315] (. java.time.OffsetTime from java-time-temporal-TemporalAccessor2315)))
(clojure.core/defn is-after {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"]))} (^java.lang.Boolean [^java.time.OffsetTime this2316 ^java.time.OffsetTime java-time-OffsetTime2317] (.isAfter this2316 java-time-OffsetTime2317)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this2318 ^long long2319] (.minusNanos this2318 long2319)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"] ["java.time.OffsetTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this2320 G__2321] #? (:cljs (.isSupported ^java.time.OffsetTime this2320 G__2321) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2321)) (clojure.core/let [G__2321 ^"java.time.temporal.TemporalField" G__2321] (.isSupported ^java.time.OffsetTime this2320 G__2321)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2321)) (clojure.core/let [G__2321 ^"java.time.temporal.TemporalUnit" G__2321] (.isSupported ^java.time.OffsetTime this2320 G__2321)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse {:arglists (quote (["java.time.OffsetTime" "java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.time.OffsetTime" "java.lang.CharSequence"]))} (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence2322 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2323] (. java.time.OffsetTime parse java-lang-CharSequence2322 java-time-format-DateTimeFormatter2323)) (^java.time.OffsetTime [^java.lang.CharSequence java-lang-CharSequence2324] (. java.time.OffsetTime parse java-lang-CharSequence2324)))
(clojure.core/defn with-second {:arglists (quote (["java.time.OffsetTime" "int"]))} (^java.time.OffsetTime [^java.time.OffsetTime this2325 ^java.lang.Integer int2326] (.withSecond this2325 int2326)))
(clojure.core/defn get-minute {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this2327] (jti/getter minute this2327)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.OffsetTime"]))} (^java.lang.Integer [^java.time.OffsetTime this2328] (.hashCode this2328)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.OffsetTime this2329 ^java.time.temporal.Temporal java-time-temporal-Temporal2330] (.adjustInto this2329 java-time-temporal-Temporal2330)))
(clojure.core/defn with {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalField" "long"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"] ["java.time.OffsetTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this2331 G__2332 G__2333] #? (:cljs (.with ^java.time.OffsetTime this2331 G__2332 G__2333) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2332) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2333)) (clojure.core/let [G__2332 ^"java.time.temporal.TemporalField" G__2332 G__2333 (clojure.core/long G__2333)] (.with ^java.time.OffsetTime this2331 G__2332 G__2333)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2332) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2333)) (clojure.core/let [G__2332 ^"java.time.temporal.TemporalField" G__2332 G__2333 (clojure.core/long G__2333)] (.with ^java.time.OffsetTime this2331 G__2332 G__2333)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2334 G__2335] #? (:cljs (.with ^java.time.OffsetTime this2334 G__2335) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2335)) (clojure.core/let [G__2335 ^"java.time.temporal.TemporalAdjuster" G__2335] (.with ^java.time.OffsetTime this2334 G__2335)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2335)) (clojure.core/let [G__2335 ^"java.time.temporal.TemporalAdjuster" G__2335] (.with ^java.time.OffsetTime this2334 G__2335)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote (["java.time.OffsetTime" "java.time.ZoneId"] ["java.time.OffsetTime"] ["java.time.OffsetTime" "java.time.Clock"]))} (^java.time.OffsetTime [G__2337] #? (:cljs (. java.time.OffsetTime now G__2337) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2337)) (clojure.core/let [G__2337 ^"java.time.ZoneId" G__2337] (. java.time.OffsetTime now G__2337)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__2337)) (clojure.core/let [G__2337 ^"java.time.Clock" G__2337] (. java.time.OffsetTime now G__2337)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.OffsetTime [] (. java.time.OffsetTime now)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.OffsetTime" "java.time.OffsetTime"] ["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Integer [this2338 G__2339] #? (:cljs (.compareTo ^java.time.OffsetTime this2338 G__2339) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.OffsetTime") G__2339)) (clojure.core/let [G__2339 ^"java.time.OffsetTime" G__2339] (.compareTo ^java.time.OffsetTime this2338 G__2339)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__2339)) (clojure.core/let [G__2339 ^"java.lang.Object" G__2339] (.compareTo ^java.time.OffsetTime this2338 G__2339)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-instant {:arglists (quote (["java.time.OffsetTime" "java.time.Instant" "java.time.ZoneId"]))} (^java.time.OffsetTime [^java.time.Instant java-time-Instant2340 ^java.time.ZoneId java-time-ZoneId2341] (. java.time.OffsetTime ofInstant java-time-Instant2340 java-time-ZoneId2341)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.OffsetTime" "long"]))} (^java.time.OffsetTime [^java.time.OffsetTime this2342 ^long long2343] (.plusSeconds this2342 long2343)))
(clojure.core/defn get {:arglists (quote (["java.time.OffsetTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.OffsetTime this2344 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2345] (.get this2344 java-time-temporal-TemporalField2345)))
(clojure.core/defn equals {:arglists (quote (["java.time.OffsetTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.OffsetTime this2346 ^java.lang.Object java-lang-Object2347] (.equals this2346 java-lang-Object2347)))
(clojure.core/defn format {:arglists (quote (["java.time.OffsetTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.OffsetTime this2348 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2349] (.format this2348 java-time-format-DateTimeFormatter2349)))
