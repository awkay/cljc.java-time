(ns cljc.java-time.temporal.temporal (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.temporal :refer [Temporal]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.temporal Temporal])))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.Temporal this3028 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3029] (.range this3028 java-time-temporal-TemporalField3029)))
(clojure.core/defn plus {:arglists (quote (["java.time.temporal.Temporal" "long" "java.time.temporal.TemporalUnit"] ["java.time.temporal.Temporal" "java.time.temporal.TemporalAmount"]))} (^java.time.temporal.Temporal [^java.time.temporal.Temporal this3030 ^long long3031 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3032] (.plus this3030 long3031 java-time-temporal-TemporalUnit3032)) (^java.time.temporal.Temporal [^java.time.temporal.Temporal this3033 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3034] (.plus this3033 java-time-temporal-TemporalAmount3034)))
(clojure.core/defn query {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.temporal.Temporal this3035 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery3036] (.query this3035 java-time-temporal-TemporalQuery3036)))
(clojure.core/defn minus {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalAmount"] ["java.time.temporal.Temporal" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.temporal.Temporal [^java.time.temporal.Temporal this3037 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3038] (.minus this3037 java-time-temporal-TemporalAmount3038)) (^java.time.temporal.Temporal [^java.time.temporal.Temporal this3039 ^long long3040 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3041] (.minus this3039 long3040 java-time-temporal-TemporalUnit3041)))
(clojure.core/defn get-long {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.Temporal this3042 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3043] (.getLong this3042 java-time-temporal-TemporalField3043)))
(clojure.core/defn until {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.temporal.Temporal this3044 ^java.time.temporal.Temporal java-time-temporal-Temporal3045 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3046] (.until this3044 java-time-temporal-Temporal3045 java-time-temporal-TemporalUnit3046)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"] ["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this3047 G__3048] #? (:cljs (.isSupported ^java.time.temporal.Temporal this3047 G__3048) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3048)) (clojure.core/let [G__3048 ^"java.time.temporal.TemporalUnit" G__3048] (.isSupported ^java.time.temporal.Temporal this3047 G__3048)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__3048)) (clojure.core/let [G__3048 ^"java.time.temporal.TemporalField" G__3048] (.isSupported ^java.time.temporal.Temporal this3047 G__3048)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalAdjuster"] ["java.time.temporal.Temporal" "java.time.temporal.TemporalField" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.Temporal this3049 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster3050] (.with this3049 java-time-temporal-TemporalAdjuster3050)) (^java.time.temporal.Temporal [^java.time.temporal.Temporal this3051 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3052 ^long long3053] (.with this3051 java-time-temporal-TemporalField3052 long3053)))
(clojure.core/defn get {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.Temporal this3054 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3055] (.get this3054 java-time-temporal-TemporalField3055)))
