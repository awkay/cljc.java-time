(ns cljc.java-time.temporal.temporal (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.temporal :refer [Temporal]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.temporal Temporal])))
(clojure.core/defn range {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.temporal.Temporal this3071 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3072] (.range this3071 java-time-temporal-TemporalField3072)))
(clojure.core/defn plus {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalAmount"] ["java.time.temporal.Temporal" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.temporal.Temporal [^java.time.temporal.Temporal this3073 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3074] (.plus this3073 java-time-temporal-TemporalAmount3074)) (^java.time.temporal.Temporal [^java.time.temporal.Temporal this3075 ^long long3076 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3077] (.plus this3075 long3076 java-time-temporal-TemporalUnit3077)))
(clojure.core/defn query {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.temporal.Temporal this3078 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery3079] (.query this3078 java-time-temporal-TemporalQuery3079)))
(clojure.core/defn minus {:arglists (quote (["java.time.temporal.Temporal" "long" "java.time.temporal.TemporalUnit"] ["java.time.temporal.Temporal" "java.time.temporal.TemporalAmount"]))} (^java.time.temporal.Temporal [^java.time.temporal.Temporal this3080 ^long long3081 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3082] (.minus this3080 long3081 java-time-temporal-TemporalUnit3082)) (^java.time.temporal.Temporal [^java.time.temporal.Temporal this3083 ^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount3084] (.minus this3083 java-time-temporal-TemporalAmount3084)))
(clojure.core/defn get-long {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^long [^java.time.temporal.Temporal this3085 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3086] (.getLong this3085 java-time-temporal-TemporalField3086)))
(clojure.core/defn until {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.temporal.Temporal this3087 ^java.time.temporal.Temporal java-time-temporal-Temporal3088 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit3089] (.until this3087 java-time-temporal-Temporal3088 java-time-temporal-TemporalUnit3089)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"] ["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this3090 G__3091] #? (:cljs (.isSupported ^java.time.temporal.Temporal this3090 G__3091) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__3091)) (clojure.core/let [G__3091 ^"java.time.temporal.TemporalUnit" G__3091] (.isSupported ^java.time.temporal.Temporal this3090 G__3091)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__3091)) (clojure.core/let [G__3091 ^"java.time.temporal.TemporalField" G__3091] (.isSupported ^java.time.temporal.Temporal this3090 G__3091)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalAdjuster"] ["java.time.temporal.Temporal" "java.time.temporal.TemporalField" "long"]))} (^java.time.temporal.Temporal [^java.time.temporal.Temporal this3092 ^java.time.temporal.TemporalAdjuster java-time-temporal-TemporalAdjuster3093] (.with this3092 java-time-temporal-TemporalAdjuster3093)) (^java.time.temporal.Temporal [^java.time.temporal.Temporal this3094 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3095 ^long long3096] (.with this3094 java-time-temporal-TemporalField3095 long3096)))
(clojure.core/defn get {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.temporal.Temporal this3097 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3098] (.get this3097 java-time-temporal-TemporalField3098)))
