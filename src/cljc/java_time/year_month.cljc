(ns cljc.java-time.year-month (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [YearMonth]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time YearMonth])))
(clojure.core/defn length-of-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this2931] (.lengthOfYear this2931)))
(clojure.core/defn range {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.YearMonth this2932 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2933] (.range this2932 java-time-temporal-TemporalField2933)))
(clojure.core/defn is-valid-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.lang.Boolean [^java.time.YearMonth this2934 ^java.lang.Integer int2935] (.isValidDay this2934 int2935)))
(clojure.core/defn of {:arglists (quote (["int" "java.time.Month"] ["int" "int"]))} (^java.time.YearMonth [G__2937 G__2938] #? (:cljs (. java.time.YearMonth of G__2937 G__2938) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2937) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__2938)) (clojure.core/let [G__2937 ^"java.lang.Integer" G__2937 G__2938 ^"java.time.Month" G__2938] (. java.time.YearMonth of G__2937 G__2938)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2937) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2938)) (clojure.core/let [G__2937 ^"java.lang.Integer" G__2937 G__2938 ^"java.lang.Integer" G__2938] (. java.time.YearMonth of G__2937 G__2938)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-month {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this2939 ^java.lang.Integer int2940] (.withMonth this2939 int2940)))
(clojure.core/defn at-day {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.LocalDate [^java.time.YearMonth this2941 ^java.lang.Integer int2942] (.atDay this2941 int2942)))
(clojure.core/defn get-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this2943] (jti/getter year this2943)))
(clojure.core/defn plus {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this2944 G__2945] #? (:cljs (.plus ^java.time.YearMonth this2944 G__2945) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2945)) (clojure.core/let [G__2945 ^"java.time.temporal.TemporalAmount" G__2945] (.plus ^java.time.YearMonth this2944 G__2945)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2945)) (clojure.core/let [G__2945 ^"java.time.temporal.TemporalAmount" G__2945] (.plus ^java.time.YearMonth this2944 G__2945)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2946 G__2947 G__2948] #? (:cljs (.plus ^java.time.YearMonth this2946 G__2947 G__2948) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2947) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2948)) (clojure.core/let [G__2947 (clojure.core/long G__2947) G__2948 ^"java.time.temporal.TemporalUnit" G__2948] (.plus ^java.time.YearMonth this2946 G__2947 G__2948)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2947) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2948)) (clojure.core/let [G__2947 (clojure.core/long G__2947) G__2948 ^"java.time.temporal.TemporalUnit" G__2948] (.plus ^java.time.YearMonth this2946 G__2947 G__2948)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn is-leap-year {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this2949] (.isLeapYear this2949)))
(clojure.core/defn query {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.YearMonth this2950 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery2951] (.query this2950 java-time-temporal-TemporalQuery2951)))
(clojure.core/defn to-string {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.String [^java.time.YearMonth this2952] (.toString this2952)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this2953 ^long long2954] (.plusMonths this2953 long2954)))
(clojure.core/defn is-before {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this2955 ^java.time.YearMonth java-time-YearMonth2956] (.isBefore this2955 java-time-YearMonth2956)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this2957 ^long long2958] (.minusMonths this2957 long2958)))
(clojure.core/defn minus {:arglists (quote (["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "java.time.temporal.TemporalAmount"] ["java.time.YearMonth" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this2959 G__2960 G__2961] #? (:cljs (.minus ^java.time.YearMonth this2959 G__2960 G__2961) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2960) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2961)) (clojure.core/let [G__2960 (clojure.core/long G__2960) G__2961 ^"java.time.temporal.TemporalUnit" G__2961] (.minus ^java.time.YearMonth this2959 G__2960 G__2961)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2960) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2961)) (clojure.core/let [G__2960 (clojure.core/long G__2960) G__2961 ^"java.time.temporal.TemporalUnit" G__2961] (.minus ^java.time.YearMonth this2959 G__2960 G__2961)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2962 G__2963] #? (:cljs (.minus ^java.time.YearMonth this2962 G__2963) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2963)) (clojure.core/let [G__2963 ^"java.time.temporal.TemporalAmount" G__2963] (.minus ^java.time.YearMonth this2962 G__2963)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2963)) (clojure.core/let [G__2963 ^"java.time.temporal.TemporalAmount" G__2963] (.minus ^java.time.YearMonth this2962 G__2963)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-long {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^long [^java.time.YearMonth this2964 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2965] (.getLong this2964 java-time-temporal-TemporalField2965)))
(clojure.core/defn with-year {:arglists (quote (["java.time.YearMonth" "int"]))} (^java.time.YearMonth [^java.time.YearMonth this2966 ^java.lang.Integer int2967] (.withYear this2966 int2967)))
(clojure.core/defn at-end-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.LocalDate [^java.time.YearMonth this2968] (.atEndOfMonth this2968)))
(clojure.core/defn length-of-month {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this2969] (.lengthOfMonth this2969)))
(clojure.core/defn until {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.YearMonth this2970 ^java.time.temporal.Temporal java-time-temporal-Temporal2971 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2972] (.until this2970 java-time-temporal-Temporal2971 java-time-temporal-TemporalUnit2972)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.YearMonth [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor2973] (. java.time.YearMonth from java-time-temporal-TemporalAccessor2973)))
(clojure.core/defn is-after {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"]))} (^java.lang.Boolean [^java.time.YearMonth this2974 ^java.time.YearMonth java-time-YearMonth2975] (.isAfter this2974 java-time-YearMonth2975)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalUnit"] ["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this2976 G__2977] #? (:cljs (.isSupported ^java.time.YearMonth this2976 G__2977) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2977)) (clojure.core/let [G__2977 ^"java.time.temporal.TemporalUnit" G__2977] (.isSupported ^java.time.YearMonth this2976 G__2977)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2977)) (clojure.core/let [G__2977 ^"java.time.temporal.TemporalField" G__2977] (.isSupported ^java.time.YearMonth this2976 G__2977)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this2978 ^long long2979] (.minusYears this2978 long2979)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence2980] (. java.time.YearMonth parse java-lang-CharSequence2980)) (^java.time.YearMonth [^java.lang.CharSequence java-lang-CharSequence2981 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2982] (. java.time.YearMonth parse java-lang-CharSequence2981 java-time-format-DateTimeFormatter2982)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this2983] (.hashCode this2983)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.YearMonth" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.YearMonth this2984 ^java.time.temporal.Temporal java-time-temporal-Temporal2985] (.adjustInto this2984 java-time-temporal-Temporal2985)))
(clojure.core/defn with {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField" "long"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalAdjuster"] ["java.time.YearMonth" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this2986 G__2987 G__2988] #? (:cljs (.with ^java.time.YearMonth this2986 G__2987 G__2988) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2987) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2988)) (clojure.core/let [G__2987 ^"java.time.temporal.TemporalField" G__2987 G__2988 (clojure.core/long G__2988)] (.with ^java.time.YearMonth this2986 G__2987 G__2988)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2987) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2988)) (clojure.core/let [G__2987 ^"java.time.temporal.TemporalField" G__2987 G__2988 (clojure.core/long G__2988)] (.with ^java.time.YearMonth this2986 G__2987 G__2988)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2989 G__2990] #? (:cljs (.with ^java.time.YearMonth this2989 G__2990) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2990)) (clojure.core/let [G__2990 ^"java.time.temporal.TemporalAdjuster" G__2990] (.with ^java.time.YearMonth this2989 G__2990)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2990)) (clojure.core/let [G__2990 ^"java.time.temporal.TemporalAdjuster" G__2990] (.with ^java.time.YearMonth this2989 G__2990)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote (["java.time.ZoneId"] [] ["java.time.Clock"]))} (^java.time.YearMonth [G__2992] #? (:cljs (. java.time.YearMonth now G__2992) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2992)) (clojure.core/let [G__2992 ^"java.time.ZoneId" G__2992] (. java.time.YearMonth now G__2992)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__2992)) (clojure.core/let [G__2992 ^"java.time.Clock" G__2992] (. java.time.YearMonth now G__2992)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.YearMonth [] (. java.time.YearMonth now)))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.YearMonth"]))} (^java.lang.Integer [^java.time.YearMonth this2993] (jti/getter monthValue this2993)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.YearMonth" "java.time.YearMonth"] ["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Integer [this2994 G__2995] #? (:cljs (.compareTo ^java.time.YearMonth this2994 G__2995) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.YearMonth") G__2995)) (clojure.core/let [G__2995 ^"java.time.YearMonth" G__2995] (.compareTo ^java.time.YearMonth this2994 G__2995)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__2995)) (clojure.core/let [G__2995 ^"java.lang.Object" G__2995] (.compareTo ^java.time.YearMonth this2994 G__2995)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month {:arglists (quote (["java.time.YearMonth"]))} (^java.time.Month [^java.time.YearMonth this2996] (jti/getter month this2996)))
(clojure.core/defn get {:arglists (quote (["java.time.YearMonth" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.YearMonth this2997 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2998] (.get this2997 java-time-temporal-TemporalField2998)))
(clojure.core/defn equals {:arglists (quote (["java.time.YearMonth" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.YearMonth this2999 ^java.lang.Object java-lang-Object3000] (.equals this2999 java-lang-Object3000)))
(clojure.core/defn format {:arglists (quote (["java.time.YearMonth" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.YearMonth this3001 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter3002] (.format this3001 java-time-format-DateTimeFormatter3002)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.YearMonth" "long"]))} (^java.time.YearMonth [^java.time.YearMonth this3003 ^long long3004] (.plusYears this3003 long3004)))
