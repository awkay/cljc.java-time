(ns cljc.java-time.duration (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Duration]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Duration])))
(def zero (. java.time.Duration -ZERO))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2745 ^long long2746] (.minusMinutes this2745 long2746)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this2747] (.toNanos this2747)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2748 ^long long2749] (.minusMillis this2748 long2749)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2750 ^long long2751] (.minusHours this2750 long2751)))
(clojure.core/defn of-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^long long2752] (. java.time.Duration ofDays long2752)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this2753] (.isNegative this2753)))
(clojure.core/defn of {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^long long2754 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2755] (. java.time.Duration of long2754 java-time-temporal-TemporalUnit2755)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this2756] (.isZero this2756)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2757 ^long long2758] (.multipliedBy this2757 long2758)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^java.time.Duration [^java.time.Duration this2759 ^java.lang.Integer int2760] (.withNanos this2759 int2760)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^java.time.Duration this2761] (jti/getter units this2761)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this2762] (jti/getter nano this2762)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2763 ^long long2764] (.plusMillis this2763 long2764)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this2765] (.toMinutes this2765)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2766 ^long long2767] (.minusSeconds this2766 long2767)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2768 ^long long2769] (.plusNanos this2768 long2769)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this2770 ^java.time.Duration java-time-Duration2771] (.plus this2770 java-time-Duration2771)) (^java.time.Duration [^java.time.Duration this2772 ^long long2773 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2774] (.plus this2772 long2773 java-time-temporal-TemporalUnit2774)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2775 ^long long2776] (.dividedBy this2775 long2776)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2777 ^long long2778] (.plusMinutes this2777 long2778)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^java.time.Duration this2779] (.toString this2779)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this2780 ^long long2781 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2782] (.minus this2780 long2781 java-time-temporal-TemporalUnit2782)) (^java.time.Duration [^java.time.Duration this2783 ^java.time.Duration java-time-Duration2784] (.minus this2783 java-time-Duration2784)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this2785 ^java.time.temporal.Temporal java-time-temporal-Temporal2786] (.addTo this2785 java-time-temporal-Temporal2786)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2787 ^long long2788] (.plusHours this2787 long2788)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2789 ^long long2790] (.plusDays this2789 long2790)))
(clojure.core/defn of-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^long long2791] (. java.time.Duration ofHours long2791)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this2792] (.toMillis this2792)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this2793] (.toHours this2793)))
(clojure.core/defn of-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^long long2794] (. java.time.Duration ofNanos long2794)))
(clojure.core/defn of-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^long long2795] (. java.time.Duration ofMillis long2795)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this2796] (.negated this2796)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this2797] (.abs this2797)))
(clojure.core/defn between {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^java.time.Duration [^java.time.temporal.Temporal java-time-temporal-Temporal2798 ^java.time.temporal.Temporal java-time-temporal-Temporal2799] (. java.time.Duration between java-time-temporal-Temporal2798 java-time-temporal-Temporal2799)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this2800] (jti/getter seconds this2800)))
(clojure.core/defn from {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalAmount"]))} (^java.time.Duration [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount2801] (. java.time.Duration from java-time-temporal-TemporalAmount2801)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2802 ^long long2803] (.minusNanos this2802 long2803)))
(clojure.core/defn parse {:arglists (quote (["java.time.Duration" "java.lang.CharSequence"]))} (^java.time.Duration [^java.lang.CharSequence java-lang-CharSequence2804] (. java.time.Duration parse java-lang-CharSequence2804)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this2805] (.hashCode this2805)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2806 ^long long2807] (.withSeconds this2806 long2807)))
(clojure.core/defn of-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^long long2808] (. java.time.Duration ofMinutes long2808)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this2809 ^java.time.temporal.Temporal java-time-temporal-Temporal2810] (.subtractFrom this2809 java-time-temporal-Temporal2810)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.lang.Object"] ["java.time.Duration" "java.time.Duration"]))} (^java.lang.Integer [this2811 G__2812] #? (:cljs (.compareTo ^java.time.Duration this2811 G__2812) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__2812)) (clojure.core/let [G__2812 ^"java.lang.Object" G__2812] (.compareTo ^java.time.Duration this2811 G__2812)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Duration") G__2812)) (clojure.core/let [G__2812 ^"java.time.Duration" G__2812] (.compareTo ^java.time.Duration this2811 G__2812)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2813 ^long long2814] (.plusSeconds this2813 long2814)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Duration this2815 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2816] (.get this2815 java-time-temporal-TemporalUnit2816)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Duration this2817 ^java.lang.Object java-lang-Object2818] (.equals this2817 java-lang-Object2818)))
(clojure.core/defn of-seconds {:arglists (quote (["java.time.Duration" "long"] ["java.time.Duration" "long" "long"]))} (^java.time.Duration [^long long2819] (. java.time.Duration ofSeconds long2819)) (^java.time.Duration [^long long2820 ^long long2821] (. java.time.Duration ofSeconds long2820 long2821)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2822 ^long long2823] (.minusDays this2822 long2823)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this2824] (.toDays this2824)))
