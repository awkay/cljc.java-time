(ns cljc.java-time.duration (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Duration]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Duration])))
(def zero (. java.time.Duration -ZERO))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2788 ^long long2789] (.minusMinutes this2788 long2789)))
(clojure.core/defn to-nanos {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this2790] (.toNanos this2790)))
(clojure.core/defn minus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2791 ^long long2792] (.minusMillis this2791 long2792)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2793 ^long long2794] (.minusHours this2793 long2794)))
(clojure.core/defn of-days {:arglists (quote (["long"]))} (^java.time.Duration [^long long2795] (. java.time.Duration ofDays long2795)))
(clojure.core/defn is-negative {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this2796] (.isNegative this2796)))
(clojure.core/defn of {:arglists (quote (["long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^long long2797 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2798] (. java.time.Duration of long2797 java-time-temporal-TemporalUnit2798)))
(clojure.core/defn is-zero {:arglists (quote (["java.time.Duration"]))} (^java.lang.Boolean [^java.time.Duration this2799] (.isZero this2799)))
(clojure.core/defn multiplied-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2800 ^long long2801] (.multipliedBy this2800 long2801)))
(clojure.core/defn with-nanos {:arglists (quote (["java.time.Duration" "int"]))} (^java.time.Duration [^java.time.Duration this2802 ^java.lang.Integer int2803] (.withNanos this2802 int2803)))
(clojure.core/defn get-units {:arglists (quote (["java.time.Duration"]))} (^java.util.List [^java.time.Duration this2804] (jti/getter units this2804)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this2805] (jti/getter nano this2805)))
(clojure.core/defn plus-millis {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2806 ^long long2807] (.plusMillis this2806 long2807)))
(clojure.core/defn to-minutes {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this2808] (.toMinutes this2808)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2809 ^long long2810] (.minusSeconds this2809 long2810)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2811 ^long long2812] (.plusNanos this2811 long2812)))
(clojure.core/defn plus {:arglists (quote (["java.time.Duration" "java.time.Duration"] ["java.time.Duration" "long" "java.time.temporal.TemporalUnit"]))} (^java.time.Duration [^java.time.Duration this2813 ^java.time.Duration java-time-Duration2814] (.plus this2813 java-time-Duration2814)) (^java.time.Duration [^java.time.Duration this2815 ^long long2816 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2817] (.plus this2815 long2816 java-time-temporal-TemporalUnit2817)))
(clojure.core/defn divided-by {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2818 ^long long2819] (.dividedBy this2818 long2819)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2820 ^long long2821] (.plusMinutes this2820 long2821)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Duration"]))} (^java.lang.String [^java.time.Duration this2822] (.toString this2822)))
(clojure.core/defn minus {:arglists (quote (["java.time.Duration" "long" "java.time.temporal.TemporalUnit"] ["java.time.Duration" "java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this2823 ^long long2824 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2825] (.minus this2823 long2824 java-time-temporal-TemporalUnit2825)) (^java.time.Duration [^java.time.Duration this2826 ^java.time.Duration java-time-Duration2827] (.minus this2826 java-time-Duration2827)))
(clojure.core/defn add-to {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this2828 ^java.time.temporal.Temporal java-time-temporal-Temporal2829] (.addTo this2828 java-time-temporal-Temporal2829)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2830 ^long long2831] (.plusHours this2830 long2831)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2832 ^long long2833] (.plusDays this2832 long2833)))
(clojure.core/defn of-hours {:arglists (quote (["long"]))} (^java.time.Duration [^long long2834] (. java.time.Duration ofHours long2834)))
(clojure.core/defn to-millis {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this2835] (.toMillis this2835)))
(clojure.core/defn to-hours {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this2836] (.toHours this2836)))
(clojure.core/defn of-nanos {:arglists (quote (["long"]))} (^java.time.Duration [^long long2837] (. java.time.Duration ofNanos long2837)))
(clojure.core/defn of-millis {:arglists (quote (["long"]))} (^java.time.Duration [^long long2838] (. java.time.Duration ofMillis long2838)))
(clojure.core/defn negated {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this2839] (.negated this2839)))
(clojure.core/defn abs {:arglists (quote (["java.time.Duration"]))} (^java.time.Duration [^java.time.Duration this2840] (.abs this2840)))
(clojure.core/defn between {:arglists (quote (["java.time.temporal.Temporal" "java.time.temporal.Temporal"]))} (^java.time.Duration [^java.time.temporal.Temporal java-time-temporal-Temporal2841 ^java.time.temporal.Temporal java-time-temporal-Temporal2842] (. java.time.Duration between java-time-temporal-Temporal2841 java-time-temporal-Temporal2842)))
(clojure.core/defn get-seconds {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this2843] (jti/getter seconds this2843)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAmount"]))} (^java.time.Duration [^java.time.temporal.TemporalAmount java-time-temporal-TemporalAmount2844] (. java.time.Duration from java-time-temporal-TemporalAmount2844)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2845 ^long long2846] (.minusNanos this2845 long2846)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"]))} (^java.time.Duration [^java.lang.CharSequence java-lang-CharSequence2847] (. java.time.Duration parse java-lang-CharSequence2847)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Duration"]))} (^java.lang.Integer [^java.time.Duration this2848] (.hashCode this2848)))
(clojure.core/defn with-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2849 ^long long2850] (.withSeconds this2849 long2850)))
(clojure.core/defn of-minutes {:arglists (quote (["long"]))} (^java.time.Duration [^long long2851] (. java.time.Duration ofMinutes long2851)))
(clojure.core/defn subtract-from {:arglists (quote (["java.time.Duration" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Duration this2852 ^java.time.temporal.Temporal java-time-temporal-Temporal2853] (.subtractFrom this2852 java-time-temporal-Temporal2853)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Duration" "java.lang.Object"] ["java.time.Duration" "java.time.Duration"]))} (^java.lang.Integer [this2854 G__2855] #? (:cljs (.compareTo ^java.time.Duration this2854 G__2855) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__2855)) (clojure.core/let [G__2855 ^"java.lang.Object" G__2855] (.compareTo ^java.time.Duration this2854 G__2855)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Duration") G__2855)) (clojure.core/let [G__2855 ^"java.time.Duration" G__2855] (.compareTo ^java.time.Duration this2854 G__2855)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2856 ^long long2857] (.plusSeconds this2856 long2857)))
(clojure.core/defn get {:arglists (quote (["java.time.Duration" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.Duration this2858 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2859] (.get this2858 java-time-temporal-TemporalUnit2859)))
(clojure.core/defn equals {:arglists (quote (["java.time.Duration" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Duration this2860 ^java.lang.Object java-lang-Object2861] (.equals this2860 java-lang-Object2861)))
(clojure.core/defn of-seconds {:arglists (quote (["long" "long"] ["long"]))} (^java.time.Duration [^long long2862 ^long long2863] (. java.time.Duration ofSeconds long2862 long2863)) (^java.time.Duration [^long long2864] (. java.time.Duration ofSeconds long2864)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.Duration" "long"]))} (^java.time.Duration [^java.time.Duration this2865 ^long long2866] (.minusDays this2865 long2866)))
(clojure.core/defn to-days {:arglists (quote (["java.time.Duration"]))} (^long [^java.time.Duration this2867] (.toDays this2867)))
