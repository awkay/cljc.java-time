(ns cljc.java-time.local-date-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [LocalDateTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time LocalDateTime])))
(def max (. java.time.LocalDateTime -MAX))
(def min (. java.time.LocalDateTime -MIN))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this1999 ^long long2000] (.minusMinutes this1999 long2000)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2001 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2002] (.truncatedTo this2001 java-time-temporal-TemporalUnit2002)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2003 ^long long2004] (.minusWeeks this2003 long2004)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.Instant [^java.time.LocalDateTime this2005 ^java.time.ZoneOffset java-time-ZoneOffset2006] (.toInstant this2005 java-time-ZoneOffset2006)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2007 ^long long2008] (.plusWeeks this2007 long2008)))
(clojure.core/defn range {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.LocalDateTime this2009 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2010] (.range this2009 java-time-temporal-TemporalField2010)))
(clojure.core/defn of-epoch-second {:arglists (quote (["long" "int" "java.time.ZoneOffset"]))} (^java.time.LocalDateTime [^long long2011 ^java.lang.Integer int2012 ^java.time.ZoneOffset java-time-ZoneOffset2013] (. java.time.LocalDateTime ofEpochSecond long2011 int2012 java-time-ZoneOffset2013)))
(clojure.core/defn get-hour {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2014] (jti/getter hour this2014)))
(clojure.core/defn at-offset {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^java.time.OffsetDateTime [^java.time.LocalDateTime this2015 ^java.time.ZoneOffset java-time-ZoneOffset2016] (.atOffset this2015 java-time-ZoneOffset2016)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2017 ^long long2018] (.minusHours this2017 long2018)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int"] ["int" "java.time.Month" "int" "int" "int" "int"] ["int" "int" "int" "int" "int" "int" "int"] ["java.time.LocalDate" "java.time.LocalTime"]))} (^java.time.LocalDateTime [G__2020 G__2021 G__2022 G__2023 G__2024] #? (:cljs (. java.time.LocalDateTime of G__2020 G__2021 G__2022 G__2023 G__2024) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2020) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2021) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2022) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2023) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2024)) (clojure.core/let [G__2020 ^"java.lang.Integer" G__2020 G__2021 ^"java.lang.Integer" G__2021 G__2022 ^"java.lang.Integer" G__2022 G__2023 ^"java.lang.Integer" G__2023 G__2024 ^"java.lang.Integer" G__2024] (. java.time.LocalDateTime of G__2020 G__2021 G__2022 G__2023 G__2024)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2020) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__2021) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2022) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2023) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2024)) (clojure.core/let [G__2020 ^"java.lang.Integer" G__2020 G__2021 ^"java.time.Month" G__2021 G__2022 ^"java.lang.Integer" G__2022 G__2023 ^"java.lang.Integer" G__2023 G__2024 ^"java.lang.Integer" G__2024] (. java.time.LocalDateTime of G__2020 G__2021 G__2022 G__2023 G__2024)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDateTime [G__2026 G__2027 G__2028 G__2029 G__2030 G__2031] #? (:cljs (. java.time.LocalDateTime of G__2026 G__2027 G__2028 G__2029 G__2030 G__2031) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2026) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2027) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2028) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2029) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2030) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2031)) (clojure.core/let [G__2026 ^"java.lang.Integer" G__2026 G__2027 ^"java.lang.Integer" G__2027 G__2028 ^"java.lang.Integer" G__2028 G__2029 ^"java.lang.Integer" G__2029 G__2030 ^"java.lang.Integer" G__2030 G__2031 ^"java.lang.Integer" G__2031] (. java.time.LocalDateTime of G__2026 G__2027 G__2028 G__2029 G__2030 G__2031)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2026) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__2027) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2028) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2029) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2030) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2031)) (clojure.core/let [G__2026 ^"java.lang.Integer" G__2026 G__2027 ^"java.time.Month" G__2027 G__2028 ^"java.lang.Integer" G__2028 G__2029 ^"java.lang.Integer" G__2029 G__2030 ^"java.lang.Integer" G__2030 G__2031 ^"java.lang.Integer" G__2031] (. java.time.LocalDateTime of G__2026 G__2027 G__2028 G__2029 G__2030 G__2031)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDateTime [G__2033 G__2034 G__2035 G__2036 G__2037 G__2038 G__2039] #? (:cljs (. java.time.LocalDateTime of G__2033 G__2034 G__2035 G__2036 G__2037 G__2038 G__2039) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2033) (clojure.core/instance? (java.lang.Class/forName "java.time.Month") G__2034) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2035) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2036) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2037) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2038) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2039)) (clojure.core/let [G__2033 ^"java.lang.Integer" G__2033 G__2034 ^"java.time.Month" G__2034 G__2035 ^"java.lang.Integer" G__2035 G__2036 ^"java.lang.Integer" G__2036 G__2037 ^"java.lang.Integer" G__2037 G__2038 ^"java.lang.Integer" G__2038 G__2039 ^"java.lang.Integer" G__2039] (. java.time.LocalDateTime of G__2033 G__2034 G__2035 G__2036 G__2037 G__2038 G__2039)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2033) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2034) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2035) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2036) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2037) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2038) (clojure.core/instance? (java.lang.Class/forName "java.lang.Integer") G__2039)) (clojure.core/let [G__2033 ^"java.lang.Integer" G__2033 G__2034 ^"java.lang.Integer" G__2034 G__2035 ^"java.lang.Integer" G__2035 G__2036 ^"java.lang.Integer" G__2036 G__2037 ^"java.lang.Integer" G__2037 G__2038 ^"java.lang.Integer" G__2038 G__2039 ^"java.lang.Integer" G__2039] (. java.time.LocalDateTime of G__2033 G__2034 G__2035 G__2036 G__2037 G__2038 G__2039)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.LocalDateTime [^java.time.LocalDate java-time-LocalDate2040 ^java.time.LocalTime java-time-LocalTime2041] (. java.time.LocalDateTime of java-time-LocalDate2040 java-time-LocalTime2041)))
(clojure.core/defn with-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2042 ^java.lang.Integer int2043] (.withMonth this2042 int2043)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this2044 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime2045] (.isEqual this2044 java-time-chrono-ChronoLocalDateTime2045)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2046] (jti/getter nano this2046)))
(clojure.core/defn get-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2047] (jti/getter year this2047)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2048 ^long long2049] (.minusSeconds this2048 long2049)))
(clojure.core/defn get-second {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2050] (jti/getter second this2050)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2051 ^long long2052] (.plusNanos this2051 long2052)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2053] (jti/getter dayOfYear this2053)))
(clojure.core/defn plus {:arglists (quote (["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this2054 G__2055 G__2056] #? (:cljs (.plus ^java.time.LocalDateTime this2054 G__2055 G__2056) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2055) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2056)) (clojure.core/let [G__2055 (clojure.core/long G__2055) G__2056 ^"java.time.temporal.TemporalUnit" G__2056] (.plus ^java.time.LocalDateTime this2054 G__2055 G__2056)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2055) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2056)) (clojure.core/let [G__2055 (clojure.core/long G__2055) G__2056 ^"java.time.temporal.TemporalUnit" G__2056] (.plus ^java.time.LocalDateTime this2054 G__2055 G__2056)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2055) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2056)) (clojure.core/let [G__2055 (clojure.core/long G__2055) G__2056 ^"java.time.temporal.TemporalUnit" G__2056] (.plus ^java.time.LocalDateTime this2054 G__2055 G__2056)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2057 G__2058] #? (:cljs (.plus ^java.time.LocalDateTime this2057 G__2058) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2058)) (clojure.core/let [G__2058 ^"java.time.temporal.TemporalAmount" G__2058] (.plus ^java.time.LocalDateTime this2057 G__2058)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2058)) (clojure.core/let [G__2058 ^"java.time.temporal.TemporalAmount" G__2058] (.plus ^java.time.LocalDateTime this2057 G__2058)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2058)) (clojure.core/let [G__2058 ^"java.time.temporal.TemporalAmount" G__2058] (.plus ^java.time.LocalDateTime this2057 G__2058)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2059 ^java.lang.Integer int2060] (.withHour this2059 int2060)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2061 ^java.lang.Integer int2062] (.withMinute this2061 int2062)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2063 ^long long2064] (.plusMinutes this2063 long2064)))
(clojure.core/defn query {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.LocalDateTime this2065 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery2066] (.query this2065 java-time-temporal-TemporalQuery2066)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.DayOfWeek [^java.time.LocalDateTime this2067] (jti/getter dayOfWeek this2067)))
(clojure.core/defn to-string {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.String [^java.time.LocalDateTime this2068] (.toString this2068)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2069 ^long long2070] (.plusMonths this2069 long2070)))
(clojure.core/defn is-before {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this2071 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime2072] (.isBefore this2071 java-time-chrono-ChronoLocalDateTime2072)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2073 ^long long2074] (.minusMonths this2073 long2074)))
(clojure.core/defn minus {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAmount"] ["java.time.LocalDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this2075 G__2076] #? (:cljs (.minus ^java.time.LocalDateTime this2075 G__2076) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2076)) (clojure.core/let [G__2076 ^"java.time.temporal.TemporalAmount" G__2076] (.minus ^java.time.LocalDateTime this2075 G__2076)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2076)) (clojure.core/let [G__2076 ^"java.time.temporal.TemporalAmount" G__2076] (.minus ^java.time.LocalDateTime this2075 G__2076)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2076)) (clojure.core/let [G__2076 ^"java.time.temporal.TemporalAmount" G__2076] (.minus ^java.time.LocalDateTime this2075 G__2076)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2077 G__2078 G__2079] #? (:cljs (.minus ^java.time.LocalDateTime this2077 G__2078 G__2079) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2078) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2079)) (clojure.core/let [G__2078 (clojure.core/long G__2078) G__2079 ^"java.time.temporal.TemporalUnit" G__2079] (.minus ^java.time.LocalDateTime this2077 G__2078 G__2079)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2078) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2079)) (clojure.core/let [G__2078 (clojure.core/long G__2078) G__2079 ^"java.time.temporal.TemporalUnit" G__2079] (.minus ^java.time.LocalDateTime this2077 G__2078 G__2079)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2078) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2079)) (clojure.core/let [G__2078 (clojure.core/long G__2078) G__2079 ^"java.time.temporal.TemporalUnit" G__2079] (.minus ^java.time.LocalDateTime this2077 G__2078 G__2079)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn at-zone {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this2080 G__2081] #? (:cljs (.atZone ^java.time.LocalDateTime this2080 G__2081) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2081)) (clojure.core/let [G__2081 ^"java.time.ZoneId" G__2081] (.atZone ^java.time.LocalDateTime this2080 G__2081)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2081)) (clojure.core/let [G__2081 ^"java.time.ZoneId" G__2081] (.atZone ^java.time.LocalDateTime this2080 G__2081)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2082 ^long long2083] (.plusHours this2082 long2083)))
(clojure.core/defn plus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2084 ^long long2085] (.plusDays this2084 long2085)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.LocalTime [^java.time.LocalDateTime this2086] (.toLocalTime this2086)))
(clojure.core/defn get-long {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.LocalDateTime this2087 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2088] (.getLong this2087 java-time-temporal-TemporalField2088)))
(clojure.core/defn with-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2089 ^java.lang.Integer int2090] (.withYear this2089 int2090)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2091 ^java.lang.Integer int2092] (.withNano this2091 int2092)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset"]))} (^long [^java.time.LocalDateTime this2093 ^java.time.ZoneOffset java-time-ZoneOffset2094] (.toEpochSecond this2093 java-time-ZoneOffset2094)))
(clojure.core/defn until {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.LocalDateTime this2095 ^java.time.temporal.Temporal java-time-temporal-Temporal2096 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2097] (.until this2095 java-time-temporal-Temporal2096 java-time-temporal-TemporalUnit2097)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2098 ^java.lang.Integer int2099] (.withDayOfMonth this2098 int2099)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2100] (jti/getter dayOfMonth this2100)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.LocalDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor2101] (. java.time.LocalDateTime from java-time-temporal-TemporalAccessor2101)))
(clojure.core/defn is-after {:arglists (quote (["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Boolean [^java.time.LocalDateTime this2102 ^java.time.chrono.ChronoLocalDateTime java-time-chrono-ChronoLocalDateTime2103] (.isAfter this2102 java-time-chrono-ChronoLocalDateTime2103)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2104 ^long long2105] (.minusNanos this2104 long2105)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"] ["java.time.LocalDateTime" "java.time.temporal.TemporalUnit"]))} (^java.lang.Boolean [this2106 G__2107] #? (:cljs (.isSupported ^java.time.LocalDateTime this2106 G__2107) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2107)) (clojure.core/let [G__2107 ^"java.time.temporal.TemporalField" G__2107] (.isSupported ^java.time.LocalDateTime this2106 G__2107)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2107)) (clojure.core/let [G__2107 ^"java.time.temporal.TemporalUnit" G__2107] (.isSupported ^java.time.LocalDateTime this2106 G__2107)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2108 ^long long2109] (.minusYears this2108 long2109)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.chrono.Chronology [^java.time.LocalDateTime this2110] (jti/getter chronology this2110)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence"] ["java.lang.CharSequence" "java.time.format.DateTimeFormatter"]))} (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence2111] (. java.time.LocalDateTime parse java-lang-CharSequence2111)) (^java.time.LocalDateTime [^java.lang.CharSequence java-lang-CharSequence2112 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2113] (. java.time.LocalDateTime parse java-lang-CharSequence2112 java-time-format-DateTimeFormatter2113)))
(clojure.core/defn with-second {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2114 ^java.lang.Integer int2115] (.withSecond this2114 int2115)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.LocalDateTime"] ["java.time.LocalDateTime"]))} (^java.lang.Object [this2116] #? (:cljs (.toLocalDate ^java.time.LocalDateTime this2116) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.LocalDateTime this2116)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.LocalDateTime this2116)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2117] (jti/getter minute this2117)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2118] (.hashCode this2118)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.LocalDateTime this2119 ^java.time.temporal.Temporal java-time-temporal-Temporal2120] (.adjustInto this2119 java-time-temporal-Temporal2120)))
(clojure.core/defn with {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.LocalDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this2121 G__2122 G__2123] #? (:cljs (.with ^java.time.LocalDateTime this2121 G__2122 G__2123) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2122) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2123)) (clojure.core/let [G__2122 ^"java.time.temporal.TemporalField" G__2122 G__2123 (clojure.core/long G__2123)] (.with ^java.time.LocalDateTime this2121 G__2122 G__2123)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2122) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2123)) (clojure.core/let [G__2122 ^"java.time.temporal.TemporalField" G__2122 G__2123 (clojure.core/long G__2123)] (.with ^java.time.LocalDateTime this2121 G__2122 G__2123)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2122) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2123)) (clojure.core/let [G__2122 ^"java.time.temporal.TemporalField" G__2122 G__2123 (clojure.core/long G__2123)] (.with ^java.time.LocalDateTime this2121 G__2122 G__2123)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2124 G__2125] #? (:cljs (.with ^java.time.LocalDateTime this2124 G__2125) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2125)) (clojure.core/let [G__2125 ^"java.time.temporal.TemporalAdjuster" G__2125] (.with ^java.time.LocalDateTime this2124 G__2125)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2125)) (clojure.core/let [G__2125 ^"java.time.temporal.TemporalAdjuster" G__2125] (.with ^java.time.LocalDateTime this2124 G__2125)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2125)) (clojure.core/let [G__2125 ^"java.time.temporal.TemporalAdjuster" G__2125] (.with ^java.time.LocalDateTime this2124 G__2125)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote ([] ["java.time.Clock"] ["java.time.ZoneId"]))} (^java.time.LocalDateTime [] (. java.time.LocalDateTime now)) (^java.time.LocalDateTime [G__2127] #? (:cljs (. java.time.LocalDateTime now G__2127) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__2127)) (clojure.core/let [G__2127 ^"java.time.Clock" G__2127] (. java.time.LocalDateTime now G__2127)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2127)) (clojure.core/let [G__2127 ^"java.time.ZoneId" G__2127] (. java.time.LocalDateTime now G__2127)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.LocalDateTime"]))} (^java.lang.Integer [^java.time.LocalDateTime this2128] (jti/getter monthValue this2128)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.LocalDateTime" "int"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2129 ^java.lang.Integer int2130] (.withDayOfYear this2129 int2130)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"] ["java.time.LocalDateTime" "java.time.chrono.ChronoLocalDateTime"]))} (^java.lang.Integer [this2131 G__2132] #? (:cljs (.compareTo ^java.time.LocalDateTime this2131 G__2132) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__2132)) (clojure.core/let [G__2132 ^"java.lang.Object" G__2132] (.compareTo ^java.time.LocalDateTime this2131 G__2132)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoLocalDateTime") G__2132)) (clojure.core/let [G__2132 ^"java.time.chrono.ChronoLocalDateTime" G__2132] (.compareTo ^java.time.LocalDateTime this2131 G__2132)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month {:arglists (quote (["java.time.LocalDateTime"]))} (^java.time.Month [^java.time.LocalDateTime this2133] (jti/getter month this2133)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.Instant" "java.time.ZoneId"]))} (^java.time.LocalDateTime [^java.time.Instant java-time-Instant2134 ^java.time.ZoneId java-time-ZoneId2135] (. java.time.LocalDateTime ofInstant java-time-Instant2134 java-time-ZoneId2135)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2136 ^long long2137] (.plusSeconds this2136 long2137)))
(clojure.core/defn get {:arglists (quote (["java.time.LocalDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.LocalDateTime this2138 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2139] (.get this2138 java-time-temporal-TemporalField2139)))
(clojure.core/defn equals {:arglists (quote (["java.time.LocalDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.LocalDateTime this2140 ^java.lang.Object java-lang-Object2141] (.equals this2140 java-lang-Object2141)))
(clojure.core/defn format {:arglists (quote (["java.time.LocalDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.LocalDateTime this2142 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2143] (.format this2142 java-time-format-DateTimeFormatter2143)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2144 ^long long2145] (.plusYears this2144 long2145)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.LocalDateTime" "long"]))} (^java.time.LocalDateTime [^java.time.LocalDateTime this2146 ^long long2147] (.minusDays this2146 long2147)))
