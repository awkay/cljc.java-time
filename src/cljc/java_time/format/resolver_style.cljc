(ns cljc.java-time.format.resolver-style (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.format :refer [ResolverStyle]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.format ResolverStyle])))
(def smart (. java.time.format.ResolverStyle -SMART))
(def strict (. java.time.format.ResolverStyle -STRICT))
(def lenient (. java.time.format.ResolverStyle -LENIENT))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.format.ResolverStyle values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.format.ResolverStyle [^java.lang.String java-lang-String3212] (. java.time.format.ResolverStyle valueOf java-lang-String3212)) (^java.lang.Enum [^java.lang.Class java-lang-Class3213 ^java.lang.String java-lang-String3214] (. java.time.format.ResolverStyle valueOf java-lang-Class3213 java-lang-String3214)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this3215] (.ordinal this3215)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^java.time.format.ResolverStyle this3216] (.toString this3216)))
(clojure.core/defn name {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.String [^java.time.format.ResolverStyle this3217] (.name this3217)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Class [^java.time.format.ResolverStyle this3218] (jti/getter declaringClass this3218)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.format.ResolverStyle"]))} (^java.lang.Integer [^java.time.format.ResolverStyle this3219] (.hashCode this3219)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Object"] ["java.time.format.ResolverStyle" "java.lang.Enum"]))} (^java.lang.Integer [this3220 G__3221] #? (:cljs (.compareTo ^java.time.format.ResolverStyle this3220 G__3221) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__3221)) (clojure.core/let [G__3221 ^"java.lang.Object" G__3221] (.compareTo ^java.time.format.ResolverStyle this3220 G__3221)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__3221)) (clojure.core/let [G__3221 ^"java.lang.Enum" G__3221] (.compareTo ^java.time.format.ResolverStyle this3220 G__3221)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn equals {:arglists (quote (["java.time.format.ResolverStyle" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.format.ResolverStyle this3222 ^java.lang.Object java-lang-Object3223] (.equals this3222 java-lang-Object3223)))
