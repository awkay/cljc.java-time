(ns cljc.java-time.format.date-time-formatter (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time.format :refer [DateTimeFormatter]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time.format DateTimeFormatter])))
(def iso-local-time (. java.time.format.DateTimeFormatter -ISO_LOCAL_TIME))
(def iso-ordinal-date (. java.time.format.DateTimeFormatter -ISO_ORDINAL_DATE))
(def iso-offset-date (. java.time.format.DateTimeFormatter -ISO_OFFSET_DATE))
(def iso-time (. java.time.format.DateTimeFormatter -ISO_TIME))
(def iso-local-date-time (. java.time.format.DateTimeFormatter -ISO_LOCAL_DATE_TIME))
(def iso-instant (. java.time.format.DateTimeFormatter -ISO_INSTANT))
(def rfc-1123-date-time (. java.time.format.DateTimeFormatter -RFC_1123_DATE_TIME))
(def iso-date (. java.time.format.DateTimeFormatter -ISO_DATE))
(def iso-week-date (. java.time.format.DateTimeFormatter -ISO_WEEK_DATE))
(def iso-offset-time (. java.time.format.DateTimeFormatter -ISO_OFFSET_TIME))
(def iso-local-date (. java.time.format.DateTimeFormatter -ISO_LOCAL_DATE))
(def iso-zoned-date-time (. java.time.format.DateTimeFormatter -ISO_ZONED_DATE_TIME))
(def iso-offset-date-time (. java.time.format.DateTimeFormatter -ISO_OFFSET_DATE_TIME))
(def iso-date-time (. java.time.format.DateTimeFormatter -ISO_DATE_TIME))
(def basic-iso-date (. java.time.format.DateTimeFormatter -BASIC_ISO_DATE))
(clojure.core/defn of-pattern {:arglists (quote (["java.lang.String"] ["java.lang.String" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String3166] (. java.time.format.DateTimeFormatter ofPattern java-lang-String3166)) (^java.time.format.DateTimeFormatter [^java.lang.String java-lang-String3167 ^java.util.Locale java-util-Locale3168] (. java.time.format.DateTimeFormatter ofPattern java-lang-String3167 java-util-Locale3168)))
(clojure.core/defn parse-best {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "[Ljava.time.temporal.TemporalQuery;"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this3169 ^java.lang.CharSequence java-lang-CharSequence3170 ^"java.lang.Class" java-time-temporal-TemporalQuery-array3171] (.parseBest this3169 java-lang-CharSequence3170 java-time-temporal-TemporalQuery-array3171)))
(clojure.core/defn format-to {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor" "java.lang.Appendable"]))} (^java.lang.Object [^java.time.format.DateTimeFormatter this3172 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor3173 ^java.lang.Appendable java-lang-Appendable3174] (.formatTo this3172 java-time-temporal-TemporalAccessor3173 java-lang-Appendable3174)))
(clojure.core/defn get-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.DecimalStyle [^java.time.format.DateTimeFormatter this3175] (jti/getter decimalStyle this3175)))
(clojure.core/defn with-chronology {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.chrono.Chronology"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this3176 ^java.time.chrono.Chronology java-time-chrono-Chronology3177] (.withChronology this3176 java-time-chrono-Chronology3177)))
(clojure.core/defn get-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.format.ResolverStyle [^java.time.format.DateTimeFormatter this3178] (jti/getter resolverStyle this3178)))
(clojure.core/defn with-decimal-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.DecimalStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this3179 ^java.time.format.DecimalStyle java-time-format-DecimalStyle3180] (.withDecimalStyle this3179 java-time-format-DecimalStyle3180)))
(clojure.core/defn get-locale {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Locale [^java.time.format.DateTimeFormatter this3181] (jti/getter locale this3181)))
(clojure.core/defn to-string {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this3182] (.toString this3182)))
(clojure.core/defn parsed-leap-second {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedLeapSecond)))
(clojure.core/defn with-zone {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.ZoneId"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this3183 ^java.time.ZoneId java-time-ZoneId3184] (.withZone this3183 java-time-ZoneId3184)))
(clojure.core/defn parsed-excess-days {:arglists (quote ([]))} (^java.time.temporal.TemporalQuery [] (. java.time.format.DateTimeFormatter parsedExcessDays)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.ZoneId [^java.time.format.DateTimeFormatter this3185] (jti/getter zone this3185)))
(clojure.core/defn of-localized-date-time {:arglists (quote (["java.time.format.FormatStyle" "java.time.format.FormatStyle"] ["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle3186 ^java.time.format.FormatStyle java-time-format-FormatStyle3187] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle3186 java-time-format-FormatStyle3187)) (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle3188] (. java.time.format.DateTimeFormatter ofLocalizedDateTime java-time-format-FormatStyle3188)))
(clojure.core/defn get-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.util.Set [^java.time.format.DateTimeFormatter this3189] (jti/getter resolverFields this3189)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.format.DateTimeFormatter"]))} (^java.time.chrono.Chronology [^java.time.format.DateTimeFormatter this3190] (jti/getter chronology this3190)))
(clojure.core/defn parse {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"] ["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.time.temporal.TemporalQuery"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this3191 ^java.lang.CharSequence java-lang-CharSequence3192] (.parse this3191 java-lang-CharSequence3192)) (^java.lang.Object [this3193 G__3194 G__3195] #? (:cljs (.parse ^java.time.format.DateTimeFormatter this3193 G__3194 G__3195) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__3194) (clojure.core/instance? (java.lang.Class/forName "java.text.ParsePosition") G__3195)) (clojure.core/let [G__3194 ^"java.lang.CharSequence" G__3194 G__3195 ^"java.text.ParsePosition" G__3195] (.parse ^java.time.format.DateTimeFormatter this3193 G__3194 G__3195)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.CharSequence") G__3194) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalQuery") G__3195)) (clojure.core/let [G__3194 ^"java.lang.CharSequence" G__3194 G__3195 ^"java.time.temporal.TemporalQuery" G__3195] (.parse ^java.time.format.DateTimeFormatter this3193 G__3194 G__3195)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-locale {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Locale"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this3196 ^java.util.Locale java-util-Locale3197] (.withLocale this3196 java-util-Locale3197)))
(clojure.core/defn with-resolver-fields {:arglists (quote (["java.time.format.DateTimeFormatter" "java.util.Set"] ["java.time.format.DateTimeFormatter" "[Ljava.time.temporal.TemporalField;"]))} (^java.time.format.DateTimeFormatter [this3198 G__3199] #? (:cljs (.withResolverFields ^java.time.format.DateTimeFormatter this3198 G__3199) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.util.Set") G__3199)) (clojure.core/let [G__3199 ^"java.util.Set" G__3199] (.withResolverFields ^java.time.format.DateTimeFormatter this3198 G__3199)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "[Ljava.time.temporal.TemporalField;") G__3199)) (clojure.core/let [G__3199 ^"[Ljava.time.temporal.TemporalField;" G__3199] (.withResolverFields ^java.time.format.DateTimeFormatter this3198 G__3199)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn parse-unresolved {:arglists (quote (["java.time.format.DateTimeFormatter" "java.lang.CharSequence" "java.text.ParsePosition"]))} (^java.time.temporal.TemporalAccessor [^java.time.format.DateTimeFormatter this3200 ^java.lang.CharSequence java-lang-CharSequence3201 ^java.text.ParsePosition java-text-ParsePosition3202] (.parseUnresolved this3200 java-lang-CharSequence3201 java-text-ParsePosition3202)))
(clojure.core/defn of-localized-time {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle3203] (. java.time.format.DateTimeFormatter ofLocalizedTime java-time-format-FormatStyle3203)))
(clojure.core/defn of-localized-date {:arglists (quote (["java.time.format.FormatStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.FormatStyle java-time-format-FormatStyle3204] (. java.time.format.DateTimeFormatter ofLocalizedDate java-time-format-FormatStyle3204)))
(clojure.core/defn format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalAccessor"]))} (^java.lang.String [^java.time.format.DateTimeFormatter this3205 ^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor3206] (.format this3205 java-time-temporal-TemporalAccessor3206)))
(clojure.core/defn to-format {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.temporal.TemporalQuery"] ["java.time.format.DateTimeFormatter"]))} (^java.text.Format [^java.time.format.DateTimeFormatter this3207 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery3208] (.toFormat this3207 java-time-temporal-TemporalQuery3208)) (^java.text.Format [^java.time.format.DateTimeFormatter this3209] (.toFormat this3209)))
(clojure.core/defn with-resolver-style {:arglists (quote (["java.time.format.DateTimeFormatter" "java.time.format.ResolverStyle"]))} (^java.time.format.DateTimeFormatter [^java.time.format.DateTimeFormatter this3210 ^java.time.format.ResolverStyle java-time-format-ResolverStyle3211] (.withResolverStyle this3210 java-time-format-ResolverStyle3211)))
