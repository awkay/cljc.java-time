(ns cljc.java-time.month (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [Month]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time Month])))
(def may (. java.time.Month -MAY))
(def december (. java.time.Month -DECEMBER))
(def june (. java.time.Month -JUNE))
(def september (. java.time.Month -SEPTEMBER))
(def february (. java.time.Month -FEBRUARY))
(def january (. java.time.Month -JANUARY))
(def november (. java.time.Month -NOVEMBER))
(def august (. java.time.Month -AUGUST))
(def july (. java.time.Month -JULY))
(def march (. java.time.Month -MARCH))
(def october (. java.time.Month -OCTOBER))
(def april (. java.time.Month -APRIL))
(clojure.core/defn range {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.Month this2747 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2748] (.range this2747 java-time-temporal-TemporalField2748)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.Month values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.Month [^java.lang.String java-lang-String2749] (. java.time.Month valueOf java-lang-String2749)) (^java.lang.Enum [^java.lang.Class java-lang-Class2750 ^java.lang.String java-lang-String2751] (. java.time.Month valueOf java-lang-Class2750 java-lang-String2751)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.Month [^java.lang.Integer int2752] (. java.time.Month of int2752)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this2753] (.ordinal this2753)))
(clojure.core/defn first-month-of-quarter {:arglists (quote (["java.time.Month"]))} (^java.time.Month [^java.time.Month this2754] (.firstMonthOfQuarter this2754)))
(clojure.core/defn min-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this2755] (.minLength this2755)))
(clojure.core/defn plus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this2756 ^long long2757] (.plus this2756 long2757)))
(clojure.core/defn query {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.Month this2758 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery2759] (.query this2758 java-time-temporal-TemporalQuery2759)))
(clojure.core/defn to-string {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this2760] (.toString this2760)))
(clojure.core/defn first-day-of-year {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this2761 ^java.lang.Boolean boolean2762] (.firstDayOfYear this2761 boolean2762)))
(clojure.core/defn minus {:arglists (quote (["java.time.Month" "long"]))} (^java.time.Month [^java.time.Month this2763 ^long long2764] (.minus this2763 long2764)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.Month" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.Month this2765 ^java.time.format.TextStyle java-time-format-TextStyle2766 ^java.util.Locale java-util-Locale2767] (jti/getter displayName this2765 java-time-format-TextStyle2766 java-util-Locale2767)))
(clojure.core/defn get-value {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this2768] (jti/getter value this2768)))
(clojure.core/defn max-length {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this2769] (.maxLength this2769)))
(clojure.core/defn name {:arglists (quote (["java.time.Month"]))} (^java.lang.String [^java.time.Month this2770] (.name this2770)))
(clojure.core/defn get-long {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^long [^java.time.Month this2771 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2772] (.getLong this2771 java-time-temporal-TemporalField2772)))
(clojure.core/defn length {:arglists (quote (["java.time.Month" "boolean"]))} (^java.lang.Integer [^java.time.Month this2773 ^java.lang.Boolean boolean2774] (.length this2773 boolean2774)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.Month"]))} (^java.lang.Class [^java.time.Month this2775] (jti/getter declaringClass this2775)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.Month [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor2776] (. java.time.Month from java-time-temporal-TemporalAccessor2776)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.Month this2777 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2778] (.isSupported this2777 java-time-temporal-TemporalField2778)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.Month"]))} (^java.lang.Integer [^java.time.Month this2779] (.hashCode this2779)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.Month" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.Month this2780 ^java.time.temporal.Temporal java-time-temporal-Temporal2781] (.adjustInto this2780 java-time-temporal-Temporal2781)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.Month" "java.lang.Object"] ["java.time.Month" "java.lang.Enum"]))} (^java.lang.Integer [this2782 G__2783] #? (:cljs (.compareTo ^java.time.Month this2782 G__2783) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__2783)) (clojure.core/let [G__2783 ^"java.lang.Object" G__2783] (.compareTo ^java.time.Month this2782 G__2783)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__2783)) (clojure.core/let [G__2783 ^"java.lang.Enum" G__2783] (.compareTo ^java.time.Month this2782 G__2783)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.Month" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.Month this2784 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2785] (.get this2784 java-time-temporal-TemporalField2785)))
(clojure.core/defn equals {:arglists (quote (["java.time.Month" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.Month this2786 ^java.lang.Object java-lang-Object2787] (.equals this2786 java-lang-Object2787)))
