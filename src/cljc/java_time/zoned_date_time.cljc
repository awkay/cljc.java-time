(ns cljc.java-time.zoned-date-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [ZonedDateTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time ZonedDateTime])))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2148 ^long long2149] (.minusMinutes this2148 long2149)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2150 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2151] (.truncatedTo this2150 java-time-temporal-TemporalUnit2151)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2152 ^long long2153] (.minusWeeks this2152 long2153)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this2154] (.toInstant this2154)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2155 ^long long2156] (.plusWeeks this2155 long2156)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this2157 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2158] (.range this2157 java-time-temporal-TemporalField2158)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this2159] #? (:cljs (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this2159) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this2159)) (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this2159)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2160] (jti/getter hour this2160)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2161 ^long long2162] (.minusHours this2161 long2162)))
(clojure.core/defn of {:arglists (quote (["int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"] ["java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"] ["java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.lang.Integer int2163 ^java.lang.Integer int2164 ^java.lang.Integer int2165 ^java.lang.Integer int2166 ^java.lang.Integer int2167 ^java.lang.Integer int2168 ^java.lang.Integer int2169 ^java.time.ZoneId java-time-ZoneId2170] (. java.time.ZonedDateTime of int2163 int2164 int2165 int2166 int2167 int2168 int2169 java-time-ZoneId2170)) (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate2171 ^java.time.LocalTime java-time-LocalTime2172 ^java.time.ZoneId java-time-ZoneId2173] (. java.time.ZonedDateTime of java-time-LocalDate2171 java-time-LocalTime2172 java-time-ZoneId2173)) (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime2174 ^java.time.ZoneId java-time-ZoneId2175] (. java.time.ZonedDateTime of java-time-LocalDateTime2174 java-time-ZoneId2175)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2176 ^java.lang.Integer int2177] (.withMonth this2176 int2177)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this2178 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime2179] (.isEqual this2178 java-time-chrono-ChronoZonedDateTime2179)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2180] (jti/getter nano this2180)))
(clojure.core/defn of-local {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime2181 ^java.time.ZoneId java-time-ZoneId2182 ^java.time.ZoneOffset java-time-ZoneOffset2183] (. java.time.ZonedDateTime ofLocal java-time-LocalDateTime2181 java-time-ZoneId2182 java-time-ZoneOffset2183)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2184] (jti/getter year this2184)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2185 ^long long2186] (.minusSeconds this2185 long2186)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2187] (jti/getter second this2187)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2188 ^long long2189] (.plusNanos this2188 long2189)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2190] (jti/getter dayOfYear this2190)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"]))} (^java.lang.Object [this2191 G__2192] #? (:cljs (.plus ^java.time.ZonedDateTime this2191 G__2192) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2192)) (clojure.core/let [G__2192 ^"java.time.temporal.TemporalAmount" G__2192] (.plus ^java.time.ZonedDateTime this2191 G__2192)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2192)) (clojure.core/let [G__2192 ^"java.time.temporal.TemporalAmount" G__2192] (.plus ^java.time.ZonedDateTime this2191 G__2192)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2192)) (clojure.core/let [G__2192 ^"java.time.temporal.TemporalAmount" G__2192] (.plus ^java.time.ZonedDateTime this2191 G__2192)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2193 G__2194 G__2195] #? (:cljs (.plus ^java.time.ZonedDateTime this2193 G__2194 G__2195) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2194) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2195)) (clojure.core/let [G__2194 (clojure.core/long G__2194) G__2195 ^"java.time.temporal.TemporalUnit" G__2195] (.plus ^java.time.ZonedDateTime this2193 G__2194 G__2195)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2194) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2195)) (clojure.core/let [G__2194 (clojure.core/long G__2194) G__2195 ^"java.time.temporal.TemporalUnit" G__2195] (.plus ^java.time.ZonedDateTime this2193 G__2194 G__2195)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2194) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2195)) (clojure.core/let [G__2194 (clojure.core/long G__2194) G__2195 ^"java.time.temporal.TemporalUnit" G__2195] (.plus ^java.time.ZonedDateTime this2193 G__2194 G__2195)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2196 ^java.lang.Integer int2197] (.withHour this2196 int2197)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2198 ^java.lang.Integer int2199] (.withMinute this2198 int2199)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2200 ^long long2201] (.plusMinutes this2200 long2201)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this2202 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery2203] (.query this2202 java-time-temporal-TemporalQuery2203)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this2204] (jti/getter dayOfWeek this2204)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this2205] (.toString this2205)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2206 ^long long2207] (.plusMonths this2206 long2207)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this2208 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime2209] (.isBefore this2208 java-time-chrono-ChronoZonedDateTime2209)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2210 ^long long2211] (.minusMonths this2210 long2211)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this2212 G__2213 G__2214] #? (:cljs (.minus ^java.time.ZonedDateTime this2212 G__2213 G__2214) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2213) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2214)) (clojure.core/let [G__2213 (clojure.core/long G__2213) G__2214 ^"java.time.temporal.TemporalUnit" G__2214] (.minus ^java.time.ZonedDateTime this2212 G__2213 G__2214)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2213) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2214)) (clojure.core/let [G__2213 (clojure.core/long G__2213) G__2214 ^"java.time.temporal.TemporalUnit" G__2214] (.minus ^java.time.ZonedDateTime this2212 G__2213 G__2214)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2213) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2214)) (clojure.core/let [G__2213 (clojure.core/long G__2213) G__2214 ^"java.time.temporal.TemporalUnit" G__2214] (.minus ^java.time.ZonedDateTime this2212 G__2213 G__2214)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2215 G__2216] #? (:cljs (.minus ^java.time.ZonedDateTime this2215 G__2216) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2216)) (clojure.core/let [G__2216 ^"java.time.temporal.TemporalAmount" G__2216] (.minus ^java.time.ZonedDateTime this2215 G__2216)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2216)) (clojure.core/let [G__2216 ^"java.time.temporal.TemporalAmount" G__2216] (.minus ^java.time.ZonedDateTime this2215 G__2216)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2216)) (clojure.core/let [G__2216 ^"java.time.temporal.TemporalAmount" G__2216] (.minus ^java.time.ZonedDateTime this2215 G__2216)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2217] (.withFixedOffsetZone this2217)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2218 ^long long2219] (.plusHours this2218 long2219)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this2220 G__2221] #? (:cljs (.withZoneSameLocal ^java.time.ZonedDateTime this2220 G__2221) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2221)) (clojure.core/let [G__2221 ^"java.time.ZoneId" G__2221] (.withZoneSameLocal ^java.time.ZonedDateTime this2220 G__2221)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2221)) (clojure.core/let [G__2221 ^"java.time.ZoneId" G__2221] (.withZoneSameLocal ^java.time.ZonedDateTime this2220 G__2221)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this2222 G__2223] #? (:cljs (.withZoneSameInstant ^java.time.ZonedDateTime this2222 G__2223) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2223)) (clojure.core/let [G__2223 ^"java.time.ZoneId" G__2223] (.withZoneSameInstant ^java.time.ZonedDateTime this2222 G__2223)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2223)) (clojure.core/let [G__2223 ^"java.time.ZoneId" G__2223] (.withZoneSameInstant ^java.time.ZonedDateTime this2222 G__2223)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2224 ^long long2225] (.plusDays this2224 long2225)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this2226] (.toLocalTime this2226)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this2227 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2228] (.getLong this2227 java-time-temporal-TemporalField2228)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this2229] (jti/getter offset this2229)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2230 ^java.lang.Integer int2231] (.withYear this2230 int2231)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2232 ^java.lang.Integer int2233] (.withNano this2232 int2233)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this2234] (.toEpochSecond this2234)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this2235] (.toOffsetDateTime this2235)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this2236] #? (:cljs (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this2236) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this2236)) (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this2236)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this2237 ^java.time.temporal.Temporal java-time-temporal-Temporal2238 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2239] (.until this2237 java-time-temporal-Temporal2238 java-time-temporal-TemporalUnit2239)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this2240] (jti/getter zone this2240)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2241 ^java.lang.Integer int2242] (.withDayOfMonth this2241 int2242)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2243] (jti/getter dayOfMonth this2243)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor2244] (. java.time.ZonedDateTime from java-time-temporal-TemporalAccessor2244)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this2245 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime2246] (.isAfter this2245 java-time-chrono-ChronoZonedDateTime2246)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2247 ^long long2248] (.minusNanos this2247 long2248)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this2249 G__2250] #? (:cljs (.isSupported ^java.time.ZonedDateTime this2249 G__2250) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2250)) (clojure.core/let [G__2250 ^"java.time.temporal.TemporalUnit" G__2250] (.isSupported ^java.time.ZonedDateTime this2249 G__2250)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2250)) (clojure.core/let [G__2250 ^"java.time.temporal.TemporalField" G__2250] (.isSupported ^java.time.ZonedDateTime this2249 G__2250)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2251 ^long long2252] (.minusYears this2251 long2252)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this2253] (jti/getter chronology this2253)))
(clojure.core/defn parse {:arglists (quote (["java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.lang.CharSequence"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence2254 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2255] (. java.time.ZonedDateTime parse java-lang-CharSequence2254 java-time-format-DateTimeFormatter2255)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence2256] (. java.time.ZonedDateTime parse java-lang-CharSequence2256)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2257 ^java.lang.Integer int2258] (.withSecond this2257 int2258)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this2259] #? (:cljs (.toLocalDate ^java.time.ZonedDateTime this2259) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this2259)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this2259)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2260] (jti/getter minute this2260)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2261] (.hashCode this2261)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"]))} (^java.lang.Object [this2262 G__2263] #? (:cljs (.with ^java.time.ZonedDateTime this2262 G__2263) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2263)) (clojure.core/let [G__2263 ^"java.time.temporal.TemporalAdjuster" G__2263] (.with ^java.time.ZonedDateTime this2262 G__2263)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2263)) (clojure.core/let [G__2263 ^"java.time.temporal.TemporalAdjuster" G__2263] (.with ^java.time.ZonedDateTime this2262 G__2263)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2263)) (clojure.core/let [G__2263 ^"java.time.temporal.TemporalAdjuster" G__2263] (.with ^java.time.ZonedDateTime this2262 G__2263)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2264 G__2265 G__2266] #? (:cljs (.with ^java.time.ZonedDateTime this2264 G__2265 G__2266) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2265) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2266)) (clojure.core/let [G__2265 ^"java.time.temporal.TemporalField" G__2265 G__2266 (clojure.core/long G__2266)] (.with ^java.time.ZonedDateTime this2264 G__2265 G__2266)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2265) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2266)) (clojure.core/let [G__2265 ^"java.time.temporal.TemporalField" G__2265 G__2266 (clojure.core/long G__2266)] (.with ^java.time.ZonedDateTime this2264 G__2265 G__2266)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2265) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2266)) (clojure.core/let [G__2265 ^"java.time.temporal.TemporalField" G__2265 G__2266 (clojure.core/long G__2266)] (.with ^java.time.ZonedDateTime this2264 G__2265 G__2266)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote (["java.time.Clock"] ["java.time.ZoneId"] []))} (^java.time.ZonedDateTime [G__2268] #? (:cljs (. java.time.ZonedDateTime now G__2268) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__2268)) (clojure.core/let [G__2268 ^"java.time.Clock" G__2268] (. java.time.ZonedDateTime now G__2268)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2268)) (clojure.core/let [G__2268 ^"java.time.ZoneId" G__2268] (. java.time.ZonedDateTime now G__2268)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.ZonedDateTime [] (. java.time.ZonedDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this2269] #? (:cljs (.toLocalDateTime ^java.time.ZonedDateTime this2269) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this2269)) (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this2269)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2270] (jti/getter monthValue this2270)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2271 ^java.lang.Integer int2272] (.withDayOfYear this2271 int2272)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"] ["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Integer [this2273 G__2274] #? (:cljs (.compareTo ^java.time.ZonedDateTime this2273 G__2274) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoZonedDateTime") G__2274)) (clojure.core/let [G__2274 ^"java.time.chrono.ChronoZonedDateTime" G__2274] (.compareTo ^java.time.ZonedDateTime this2273 G__2274)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__2274)) (clojure.core/let [G__2274 ^"java.lang.Object" G__2274] (.compareTo ^java.time.ZonedDateTime this2273 G__2274)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-strict {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime2275 ^java.time.ZoneOffset java-time-ZoneOffset2276 ^java.time.ZoneId java-time-ZoneId2277] (. java.time.ZonedDateTime ofStrict java-time-LocalDateTime2275 java-time-ZoneOffset2276 java-time-ZoneId2277)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this2278] (jti/getter month this2278)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"] ["java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime2279 ^java.time.ZoneOffset java-time-ZoneOffset2280 ^java.time.ZoneId java-time-ZoneId2281] (. java.time.ZonedDateTime ofInstant java-time-LocalDateTime2279 java-time-ZoneOffset2280 java-time-ZoneId2281)) (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant2282 ^java.time.ZoneId java-time-ZoneId2283] (. java.time.ZonedDateTime ofInstant java-time-Instant2282 java-time-ZoneId2283)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2284 ^long long2285] (.plusSeconds this2284 long2285)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2286 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2287] (.get this2286 java-time-temporal-TemporalField2287)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this2288 ^java.lang.Object java-lang-Object2289] (.equals this2288 java-lang-Object2289)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this2290 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2291] (.format this2290 java-time-format-DateTimeFormatter2291)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2292 ^long long2293] (.plusYears this2292 long2293)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2294 ^long long2295] (.minusDays this2294 long2295)))
