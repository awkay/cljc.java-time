(ns cljc.java-time.zoned-date-time (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [ZonedDateTime]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time ZonedDateTime])))
(clojure.core/defn minus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2105 ^long long2106] (.minusMinutes this2105 long2106)))
(clojure.core/defn truncated-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2107 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2108] (.truncatedTo this2107 java-time-temporal-TemporalUnit2108)))
(clojure.core/defn minus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2109 ^long long2110] (.minusWeeks this2109 long2110)))
(clojure.core/defn to-instant {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Instant [^java.time.ZonedDateTime this2111] (.toInstant this2111)))
(clojure.core/defn plus-weeks {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2112 ^long long2113] (.plusWeeks this2112 long2113)))
(clojure.core/defn range {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZonedDateTime this2114 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2115] (.range this2114 java-time-temporal-TemporalField2115)))
(clojure.core/defn with-earlier-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this2116] #? (:cljs (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this2116) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this2116)) (clojure.core/and) (clojure.core/let [] (.withEarlierOffsetAtOverlap ^java.time.ZonedDateTime this2116)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-hour {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2117] (jti/getter hour this2117)))
(clojure.core/defn minus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2118 ^long long2119] (.minusHours this2118 long2119)))
(clojure.core/defn of {:arglists (quote (["java.time.ZonedDateTime" "java.time.LocalDate" "java.time.LocalTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "int" "int" "int" "int" "int" "int" "int" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.LocalDateTime" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDate java-time-LocalDate2120 ^java.time.LocalTime java-time-LocalTime2121 ^java.time.ZoneId java-time-ZoneId2122] (. java.time.ZonedDateTime of java-time-LocalDate2120 java-time-LocalTime2121 java-time-ZoneId2122)) (^java.time.ZonedDateTime [^java.lang.Integer int2123 ^java.lang.Integer int2124 ^java.lang.Integer int2125 ^java.lang.Integer int2126 ^java.lang.Integer int2127 ^java.lang.Integer int2128 ^java.lang.Integer int2129 ^java.time.ZoneId java-time-ZoneId2130] (. java.time.ZonedDateTime of int2123 int2124 int2125 int2126 int2127 int2128 int2129 java-time-ZoneId2130)) (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime2131 ^java.time.ZoneId java-time-ZoneId2132] (. java.time.ZonedDateTime of java-time-LocalDateTime2131 java-time-ZoneId2132)))
(clojure.core/defn with-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2133 ^java.lang.Integer int2134] (.withMonth this2133 int2134)))
(clojure.core/defn is-equal {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this2135 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime2136] (.isEqual this2135 java-time-chrono-ChronoZonedDateTime2136)))
(clojure.core/defn get-nano {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2137] (jti/getter nano this2137)))
(clojure.core/defn of-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.LocalDateTime" "java.time.ZoneId" "java.time.ZoneOffset"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime2138 ^java.time.ZoneId java-time-ZoneId2139 ^java.time.ZoneOffset java-time-ZoneOffset2140] (. java.time.ZonedDateTime ofLocal java-time-LocalDateTime2138 java-time-ZoneId2139 java-time-ZoneOffset2140)))
(clojure.core/defn get-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2141] (jti/getter year this2141)))
(clojure.core/defn minus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2142 ^long long2143] (.minusSeconds this2142 long2143)))
(clojure.core/defn get-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2144] (jti/getter second this2144)))
(clojure.core/defn plus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2145 ^long long2146] (.plusNanos this2145 long2146)))
(clojure.core/defn get-day-of-year {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2147] (jti/getter dayOfYear this2147)))
(clojure.core/defn plus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this2148 G__2149 G__2150] #? (:cljs (.plus ^java.time.ZonedDateTime this2148 G__2149 G__2150) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2149) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2150)) (clojure.core/let [G__2149 (clojure.core/long G__2149) G__2150 ^"java.time.temporal.TemporalUnit" G__2150] (.plus ^java.time.ZonedDateTime this2148 G__2149 G__2150)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2149) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2150)) (clojure.core/let [G__2149 (clojure.core/long G__2149) G__2150 ^"java.time.temporal.TemporalUnit" G__2150] (.plus ^java.time.ZonedDateTime this2148 G__2149 G__2150)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2149) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2150)) (clojure.core/let [G__2149 (clojure.core/long G__2149) G__2150 ^"java.time.temporal.TemporalUnit" G__2150] (.plus ^java.time.ZonedDateTime this2148 G__2149 G__2150)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2151 G__2152] #? (:cljs (.plus ^java.time.ZonedDateTime this2151 G__2152) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2152)) (clojure.core/let [G__2152 ^"java.time.temporal.TemporalAmount" G__2152] (.plus ^java.time.ZonedDateTime this2151 G__2152)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2152)) (clojure.core/let [G__2152 ^"java.time.temporal.TemporalAmount" G__2152] (.plus ^java.time.ZonedDateTime this2151 G__2152)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2152)) (clojure.core/let [G__2152 ^"java.time.temporal.TemporalAmount" G__2152] (.plus ^java.time.ZonedDateTime this2151 G__2152)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-hour {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2153 ^java.lang.Integer int2154] (.withHour this2153 int2154)))
(clojure.core/defn with-minute {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2155 ^java.lang.Integer int2156] (.withMinute this2155 int2156)))
(clojure.core/defn plus-minutes {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2157 ^long long2158] (.plusMinutes this2157 long2158)))
(clojure.core/defn query {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZonedDateTime this2159 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery2160] (.query this2159 java-time-temporal-TemporalQuery2160)))
(clojure.core/defn get-day-of-week {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.DayOfWeek [^java.time.ZonedDateTime this2161] (jti/getter dayOfWeek this2161)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.String [^java.time.ZonedDateTime this2162] (.toString this2162)))
(clojure.core/defn plus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2163 ^long long2164] (.plusMonths this2163 long2164)))
(clojure.core/defn is-before {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this2165 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime2166] (.isBefore this2165 java-time-chrono-ChronoZonedDateTime2166)))
(clojure.core/defn minus-months {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2167 ^long long2168] (.minusMonths this2167 long2168)))
(clojure.core/defn minus {:arglists (quote (["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"] ["java.time.ZonedDateTime" "long" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAmount"]))} (^java.lang.Object [this2169 G__2170 G__2171] #? (:cljs (.minus ^java.time.ZonedDateTime this2169 G__2170 G__2171) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2170) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2171)) (clojure.core/let [G__2170 (clojure.core/long G__2170) G__2171 ^"java.time.temporal.TemporalUnit" G__2171] (.minus ^java.time.ZonedDateTime this2169 G__2170 G__2171)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2170) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2171)) (clojure.core/let [G__2170 (clojure.core/long G__2170) G__2171 ^"java.time.temporal.TemporalUnit" G__2171] (.minus ^java.time.ZonedDateTime this2169 G__2170 G__2171)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2170) (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2171)) (clojure.core/let [G__2170 (clojure.core/long G__2170) G__2171 ^"java.time.temporal.TemporalUnit" G__2171] (.minus ^java.time.ZonedDateTime this2169 G__2170 G__2171)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2172 G__2173] #? (:cljs (.minus ^java.time.ZonedDateTime this2172 G__2173) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2173)) (clojure.core/let [G__2173 ^"java.time.temporal.TemporalAmount" G__2173] (.minus ^java.time.ZonedDateTime this2172 G__2173)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2173)) (clojure.core/let [G__2173 ^"java.time.temporal.TemporalAmount" G__2173] (.minus ^java.time.ZonedDateTime this2172 G__2173)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAmount") G__2173)) (clojure.core/let [G__2173 ^"java.time.temporal.TemporalAmount" G__2173] (.minus ^java.time.ZonedDateTime this2172 G__2173)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-fixed-offset-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2174] (.withFixedOffsetZone this2174)))
(clojure.core/defn plus-hours {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2175 ^long long2176] (.plusHours this2175 long2176)))
(clojure.core/defn with-zone-same-local {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this2177 G__2178] #? (:cljs (.withZoneSameLocal ^java.time.ZonedDateTime this2177 G__2178) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2178)) (clojure.core/let [G__2178 ^"java.time.ZoneId" G__2178] (.withZoneSameLocal ^java.time.ZonedDateTime this2177 G__2178)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2178)) (clojure.core/let [G__2178 ^"java.time.ZoneId" G__2178] (.withZoneSameLocal ^java.time.ZonedDateTime this2177 G__2178)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn with-zone-same-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.ZoneId"]))} (^java.lang.Object [this2179 G__2180] #? (:cljs (.withZoneSameInstant ^java.time.ZonedDateTime this2179 G__2180) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2180)) (clojure.core/let [G__2180 ^"java.time.ZoneId" G__2180] (.withZoneSameInstant ^java.time.ZonedDateTime this2179 G__2180)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2180)) (clojure.core/let [G__2180 ^"java.time.ZoneId" G__2180] (.withZoneSameInstant ^java.time.ZonedDateTime this2179 G__2180)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn plus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2181 ^long long2182] (.plusDays this2181 long2182)))
(clojure.core/defn to-local-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.LocalTime [^java.time.ZonedDateTime this2183] (.toLocalTime this2183)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZonedDateTime this2184 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2185] (.getLong this2184 java-time-temporal-TemporalField2185)))
(clojure.core/defn get-offset {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneOffset [^java.time.ZonedDateTime this2186] (jti/getter offset this2186)))
(clojure.core/defn with-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2187 ^java.lang.Integer int2188] (.withYear this2187 int2188)))
(clojure.core/defn with-nano {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2189 ^java.lang.Integer int2190] (.withNano this2189 int2190)))
(clojure.core/defn to-epoch-second {:arglists (quote (["java.time.ZonedDateTime"]))} (^long [^java.time.ZonedDateTime this2191] (.toEpochSecond this2191)))
(clojure.core/defn to-offset-date-time {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.OffsetDateTime [^java.time.ZonedDateTime this2192] (.toOffsetDateTime this2192)))
(clojure.core/defn with-later-offset-at-overlap {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this2193] #? (:cljs (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this2193) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this2193)) (clojure.core/and) (clojure.core/let [] (.withLaterOffsetAtOverlap ^java.time.ZonedDateTime this2193)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn until {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.Temporal" "java.time.temporal.TemporalUnit"]))} (^long [^java.time.ZonedDateTime this2194 ^java.time.temporal.Temporal java-time-temporal-Temporal2195 ^java.time.temporal.TemporalUnit java-time-temporal-TemporalUnit2196] (.until this2194 java-time-temporal-Temporal2195 java-time-temporal-TemporalUnit2196)))
(clojure.core/defn get-zone {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.ZoneId [^java.time.ZonedDateTime this2197] (jti/getter zone this2197)))
(clojure.core/defn with-day-of-month {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2198 ^java.lang.Integer int2199] (.withDayOfMonth this2198 int2199)))
(clojure.core/defn get-day-of-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2200] (jti/getter dayOfMonth this2200)))
(clojure.core/defn from {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalAccessor"]))} (^java.time.ZonedDateTime [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor2201] (. java.time.ZonedDateTime from java-time-temporal-TemporalAccessor2201)))
(clojure.core/defn is-after {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this2202 ^java.time.chrono.ChronoZonedDateTime java-time-chrono-ChronoZonedDateTime2203] (.isAfter this2202 java-time-chrono-ChronoZonedDateTime2203)))
(clojure.core/defn minus-nanos {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2204 ^long long2205] (.minusNanos this2204 long2205)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalUnit"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [this2206 G__2207] #? (:cljs (.isSupported ^java.time.ZonedDateTime this2206 G__2207) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalUnit") G__2207)) (clojure.core/let [G__2207 ^"java.time.temporal.TemporalUnit" G__2207] (.isSupported ^java.time.ZonedDateTime this2206 G__2207)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2207)) (clojure.core/let [G__2207 ^"java.time.temporal.TemporalField" G__2207] (.isSupported ^java.time.ZonedDateTime this2206 G__2207)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn minus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2208 ^long long2209] (.minusYears this2208 long2209)))
(clojure.core/defn get-chronology {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.chrono.Chronology [^java.time.ZonedDateTime this2210] (jti/getter chronology this2210)))
(clojure.core/defn parse {:arglists (quote (["java.time.ZonedDateTime" "java.lang.CharSequence" "java.time.format.DateTimeFormatter"] ["java.time.ZonedDateTime" "java.lang.CharSequence"]))} (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence2211 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2212] (. java.time.ZonedDateTime parse java-lang-CharSequence2211 java-time-format-DateTimeFormatter2212)) (^java.time.ZonedDateTime [^java.lang.CharSequence java-lang-CharSequence2213] (. java.time.ZonedDateTime parse java-lang-CharSequence2213)))
(clojure.core/defn with-second {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2214 ^java.lang.Integer int2215] (.withSecond this2214 int2215)))
(clojure.core/defn to-local-date {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this2216] #? (:cljs (.toLocalDate ^java.time.ZonedDateTime this2216) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this2216)) (clojure.core/and) (clojure.core/let [] (.toLocalDate ^java.time.ZonedDateTime this2216)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-minute {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2217] (jti/getter minute this2217)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2218] (.hashCode this2218)))
(clojure.core/defn with {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalAdjuster"] ["java.time.ZonedDateTime" "java.time.temporal.TemporalField" "long"]))} (^java.lang.Object [this2219 G__2220 G__2221] #? (:cljs (.with ^java.time.ZonedDateTime this2219 G__2220 G__2221) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2220) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2221)) (clojure.core/let [G__2220 ^"java.time.temporal.TemporalField" G__2220 G__2221 (clojure.core/long G__2221)] (.with ^java.time.ZonedDateTime this2219 G__2220 G__2221)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2220) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2221)) (clojure.core/let [G__2220 ^"java.time.temporal.TemporalField" G__2220 G__2221 (clojure.core/long G__2221)] (.with ^java.time.ZonedDateTime this2219 G__2220 G__2221)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalField") G__2220) (clojure.core/instance? (java.lang.Class/forName "java.lang.Long") G__2221)) (clojure.core/let [G__2220 ^"java.time.temporal.TemporalField" G__2220 G__2221 (clojure.core/long G__2221)] (.with ^java.time.ZonedDateTime this2219 G__2220 G__2221)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.lang.Object [this2222 G__2223] #? (:cljs (.with ^java.time.ZonedDateTime this2222 G__2223) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2223)) (clojure.core/let [G__2223 ^"java.time.temporal.TemporalAdjuster" G__2223] (.with ^java.time.ZonedDateTime this2222 G__2223)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2223)) (clojure.core/let [G__2223 ^"java.time.temporal.TemporalAdjuster" G__2223] (.with ^java.time.ZonedDateTime this2222 G__2223)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAdjuster") G__2223)) (clojure.core/let [G__2223 ^"java.time.temporal.TemporalAdjuster" G__2223] (.with ^java.time.ZonedDateTime this2222 G__2223)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn now {:arglists (quote (["java.time.ZonedDateTime" "java.time.ZoneId"] ["java.time.ZonedDateTime"] ["java.time.ZonedDateTime" "java.time.Clock"]))} (^java.time.ZonedDateTime [G__2225] #? (:cljs (. java.time.ZonedDateTime now G__2225) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneId") G__2225)) (clojure.core/let [G__2225 ^"java.time.ZoneId" G__2225] (. java.time.ZonedDateTime now G__2225)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.Clock") G__2225)) (clojure.core/let [G__2225 ^"java.time.Clock" G__2225] (. java.time.ZonedDateTime now G__2225)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.ZonedDateTime [] (. java.time.ZonedDateTime now)))
(clojure.core/defn to-local-date-time {:arglists (quote (["java.time.ZonedDateTime"] ["java.time.ZonedDateTime"]))} (^java.lang.Object [this2226] #? (:cljs (.toLocalDateTime ^java.time.ZonedDateTime this2226) :clj (clojure.core/cond (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this2226)) (clojure.core/and) (clojure.core/let [] (.toLocalDateTime ^java.time.ZonedDateTime this2226)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get-month-value {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2227] (jti/getter monthValue this2227)))
(clojure.core/defn with-day-of-year {:arglists (quote (["java.time.ZonedDateTime" "int"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2228 ^java.lang.Integer int2229] (.withDayOfYear this2228 int2229)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZonedDateTime" "java.time.chrono.ChronoZonedDateTime"] ["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Integer [this2230 G__2231] #? (:cljs (.compareTo ^java.time.ZonedDateTime this2230 G__2231) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.chrono.ChronoZonedDateTime") G__2231)) (clojure.core/let [G__2231 ^"java.time.chrono.ChronoZonedDateTime" G__2231] (.compareTo ^java.time.ZonedDateTime this2230 G__2231)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__2231)) (clojure.core/let [G__2231 ^"java.lang.Object" G__2231] (.compareTo ^java.time.ZonedDateTime this2230 G__2231)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-strict {:arglists (quote (["java.time.ZonedDateTime" "java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime2232 ^java.time.ZoneOffset java-time-ZoneOffset2233 ^java.time.ZoneId java-time-ZoneId2234] (. java.time.ZonedDateTime ofStrict java-time-LocalDateTime2232 java-time-ZoneOffset2233 java-time-ZoneId2234)))
(clojure.core/defn get-month {:arglists (quote (["java.time.ZonedDateTime"]))} (^java.time.Month [^java.time.ZonedDateTime this2235] (jti/getter month this2235)))
(clojure.core/defn of-instant {:arglists (quote (["java.time.ZonedDateTime" "java.time.LocalDateTime" "java.time.ZoneOffset" "java.time.ZoneId"] ["java.time.ZonedDateTime" "java.time.Instant" "java.time.ZoneId"]))} (^java.time.ZonedDateTime [^java.time.LocalDateTime java-time-LocalDateTime2236 ^java.time.ZoneOffset java-time-ZoneOffset2237 ^java.time.ZoneId java-time-ZoneId2238] (. java.time.ZonedDateTime ofInstant java-time-LocalDateTime2236 java-time-ZoneOffset2237 java-time-ZoneId2238)) (^java.time.ZonedDateTime [^java.time.Instant java-time-Instant2239 ^java.time.ZoneId java-time-ZoneId2240] (. java.time.ZonedDateTime ofInstant java-time-Instant2239 java-time-ZoneId2240)))
(clojure.core/defn plus-seconds {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2241 ^long long2242] (.plusSeconds this2241 long2242)))
(clojure.core/defn get {:arglists (quote (["java.time.ZonedDateTime" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZonedDateTime this2243 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2244] (.get this2243 java-time-temporal-TemporalField2244)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZonedDateTime" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZonedDateTime this2245 ^java.lang.Object java-lang-Object2246] (.equals this2245 java-lang-Object2246)))
(clojure.core/defn format {:arglists (quote (["java.time.ZonedDateTime" "java.time.format.DateTimeFormatter"]))} (^java.lang.String [^java.time.ZonedDateTime this2247 ^java.time.format.DateTimeFormatter java-time-format-DateTimeFormatter2248] (.format this2247 java-time-format-DateTimeFormatter2248)))
(clojure.core/defn plus-years {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2249 ^long long2250] (.plusYears this2249 long2250)))
(clojure.core/defn minus-days {:arglists (quote (["java.time.ZonedDateTime" "long"]))} (^java.time.ZonedDateTime [^java.time.ZonedDateTime this2251 ^long long2252] (.minusDays this2251 long2252)))
