(ns cljc.java-time.zone-offset (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [ZoneOffset]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time ZoneOffset])))
(def max (. java.time.ZoneOffset -MAX))
(def min (. java.time.ZoneOffset -MIN))
(def utc (. java.time.ZoneOffset -UTC))
(clojure.core/defn get-available-zone-ids {:arglists (quote (["java.time.ZoneOffset"]))} (^java.util.Set [] (. java.time.ZoneOffset getAvailableZoneIds)))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZoneOffset this2979 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2980] (.range this2979 java-time-temporal-TemporalField2980)))
(clojure.core/defn of-total-seconds {:arglists (quote (["java.time.ZoneOffset" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int2981] (. java.time.ZoneOffset ofTotalSeconds int2981)))
(clojure.core/defn of {:arglists (quote (["java.time.ZoneOffset" "java.lang.String"] ["java.time.ZoneOffset" "java.lang.String"] ["java.time.ZoneOffset" "java.lang.String" "java.util.Map"]))} (^java.lang.Object [G__2983] #? (:cljs (. java.time.ZoneOffset of G__2983) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__2983)) (clojure.core/let [G__2983 ^"java.lang.String" G__2983] (. java.time.ZoneOffset of G__2983)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__2983)) (clojure.core/let [G__2983 ^"java.lang.String" G__2983] (. java.time.ZoneOffset of G__2983)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.ZoneId [^java.lang.String java-lang-String2984 ^java.util.Map java-util-Map2985] (. java.time.ZoneOffset of java-lang-String2984 java-util-Map2985)))
(clojure.core/defn of-offset {:arglists (quote (["java.time.ZoneOffset" "java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String2986 ^java.time.ZoneOffset java-time-ZoneOffset2987] (. java.time.ZoneOffset ofOffset java-lang-String2986 java-time-ZoneOffset2987)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZoneOffset this2988 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery2989] (.query this2988 java-time-temporal-TemporalQuery2989)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this2990] (.toString this2990)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneOffset this2991 ^java.time.format.TextStyle java-time-format-TextStyle2992 ^java.util.Locale java-util-Locale2993] (jti/getter displayName this2991 java-time-format-TextStyle2992 java-util-Locale2993)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZoneOffset this2994 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2995] (.getLong this2994 java-time-temporal-TemporalField2995)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.zone.ZoneRules [^java.time.ZoneOffset this2996] (jti/getter rules this2996)))
(clojure.core/defn of-hours {:arglists (quote (["java.time.ZoneOffset" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int2997] (. java.time.ZoneOffset ofHours int2997)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this2998] (jti/getter id this2998)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.time.ZoneOffset this2999] (.normalized this2999)))
(clojure.core/defn system-default {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.ZoneId [] (. java.time.ZoneOffset systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalAccessor"] ["java.time.ZoneOffset" "java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__3001] #? (:cljs (. java.time.ZoneOffset from G__3001) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__3001)) (clojure.core/let [G__3001 ^"java.time.temporal.TemporalAccessor" G__3001] (. java.time.ZoneOffset from G__3001)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__3001)) (clojure.core/let [G__3001 ^"java.time.temporal.TemporalAccessor" G__3001] (. java.time.ZoneOffset from G__3001)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["java.time.ZoneOffset" "int" "int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int3002 ^java.lang.Integer int3003 ^java.lang.Integer int3004] (. java.time.ZoneOffset ofHoursMinutesSeconds int3002 int3003 int3004)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.ZoneOffset this3005 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3006] (.isSupported this3005 java-time-temporal-TemporalField3006)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this3007] (.hashCode this3007)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this3008] (jti/getter totalSeconds this3008)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.ZoneOffset this3009 ^java.time.temporal.Temporal java-time-temporal-Temporal3010] (.adjustInto this3009 java-time-temporal-Temporal3010)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["java.time.ZoneOffset" "int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int3011 ^java.lang.Integer int3012] (. java.time.ZoneOffset ofHoursMinutes int3011 int3012)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"] ["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Integer [this3013 G__3014] #? (:cljs (.compareTo ^java.time.ZoneOffset this3013 G__3014) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneOffset") G__3014)) (clojure.core/let [G__3014 ^"java.time.ZoneOffset" G__3014] (.compareTo ^java.time.ZoneOffset this3013 G__3014)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__3014)) (clojure.core/let [G__3014 ^"java.lang.Object" G__3014] (.compareTo ^java.time.ZoneOffset this3013 G__3014)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZoneOffset this3015 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3016] (.get this3015 java-time-temporal-TemporalField3016)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneOffset this3017 ^java.lang.Object java-lang-Object3018] (.equals this3017 java-lang-Object3018)))
