(ns cljc.java-time.zone-offset (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [ZoneOffset]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time ZoneOffset])))
(def max (. java.time.ZoneOffset -MAX))
(def min (. java.time.ZoneOffset -MIN))
(def utc (. java.time.ZoneOffset -UTC))
(clojure.core/defn get-available-zone-ids {:arglists (quote ([]))} (^java.util.Set [] (. java.time.ZoneOffset getAvailableZoneIds)))
(clojure.core/defn range {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.ZoneOffset this3022 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3023] (.range this3022 java-time-temporal-TemporalField3023)))
(clojure.core/defn of-total-seconds {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int3024] (. java.time.ZoneOffset ofTotalSeconds int3024)))
(clojure.core/defn of {:arglists (quote (["java.lang.String"] ["java.lang.String"] ["java.lang.String" "java.util.Map"]))} (^java.lang.Object [G__3026] #? (:cljs (. java.time.ZoneOffset of G__3026) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__3026)) (clojure.core/let [G__3026 ^"java.lang.String" G__3026] (. java.time.ZoneOffset of G__3026)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.String") G__3026)) (clojure.core/let [G__3026 ^"java.lang.String" G__3026] (. java.time.ZoneOffset of G__3026)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))) (^java.time.ZoneId [^java.lang.String java-lang-String3027 ^java.util.Map java-util-Map3028] (. java.time.ZoneOffset of java-lang-String3027 java-util-Map3028)))
(clojure.core/defn of-offset {:arglists (quote (["java.lang.String" "java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.lang.String java-lang-String3029 ^java.time.ZoneOffset java-time-ZoneOffset3030] (. java.time.ZoneOffset ofOffset java-lang-String3029 java-time-ZoneOffset3030)))
(clojure.core/defn query {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.ZoneOffset this3031 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery3032] (.query this3031 java-time-temporal-TemporalQuery3032)))
(clojure.core/defn to-string {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this3033] (.toString this3033)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.ZoneOffset" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.ZoneOffset this3034 ^java.time.format.TextStyle java-time-format-TextStyle3035 ^java.util.Locale java-util-Locale3036] (jti/getter displayName this3034 java-time-format-TextStyle3035 java-util-Locale3036)))
(clojure.core/defn get-long {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^long [^java.time.ZoneOffset this3037 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3038] (.getLong this3037 java-time-temporal-TemporalField3038)))
(clojure.core/defn get-rules {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.zone.ZoneRules [^java.time.ZoneOffset this3039] (jti/getter rules this3039)))
(clojure.core/defn of-hours {:arglists (quote (["int"]))} (^java.time.ZoneOffset [^java.lang.Integer int3040] (. java.time.ZoneOffset ofHours int3040)))
(clojure.core/defn get-id {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.String [^java.time.ZoneOffset this3041] (jti/getter id this3041)))
(clojure.core/defn normalized {:arglists (quote (["java.time.ZoneOffset"]))} (^java.time.ZoneId [^java.time.ZoneOffset this3042] (.normalized this3042)))
(clojure.core/defn system-default {:arglists (quote ([]))} (^java.time.ZoneId [] (. java.time.ZoneOffset systemDefault)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"] ["java.time.temporal.TemporalAccessor"]))} (^java.lang.Object [G__3044] #? (:cljs (. java.time.ZoneOffset from G__3044) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__3044)) (clojure.core/let [G__3044 ^"java.time.temporal.TemporalAccessor" G__3044] (. java.time.ZoneOffset from G__3044)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.temporal.TemporalAccessor") G__3044)) (clojure.core/let [G__3044 ^"java.time.temporal.TemporalAccessor" G__3044] (. java.time.ZoneOffset from G__3044)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn of-hours-minutes-seconds {:arglists (quote (["int" "int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int3045 ^java.lang.Integer int3046 ^java.lang.Integer int3047] (. java.time.ZoneOffset ofHoursMinutesSeconds int3045 int3046 int3047)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.ZoneOffset this3048 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3049] (.isSupported this3048 java-time-temporal-TemporalField3049)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this3050] (.hashCode this3050)))
(clojure.core/defn get-total-seconds {:arglists (quote (["java.time.ZoneOffset"]))} (^java.lang.Integer [^java.time.ZoneOffset this3051] (jti/getter totalSeconds this3051)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.ZoneOffset this3052 ^java.time.temporal.Temporal java-time-temporal-Temporal3053] (.adjustInto this3052 java-time-temporal-Temporal3053)))
(clojure.core/defn of-hours-minutes {:arglists (quote (["int" "int"]))} (^java.time.ZoneOffset [^java.lang.Integer int3054 ^java.lang.Integer int3055] (. java.time.ZoneOffset ofHoursMinutes int3054 int3055)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.ZoneOffset" "java.time.ZoneOffset"] ["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Integer [this3056 G__3057] #? (:cljs (.compareTo ^java.time.ZoneOffset this3056 G__3057) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.time.ZoneOffset") G__3057)) (clojure.core/let [G__3057 ^"java.time.ZoneOffset" G__3057] (.compareTo ^java.time.ZoneOffset this3056 G__3057)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__3057)) (clojure.core/let [G__3057 ^"java.lang.Object" G__3057] (.compareTo ^java.time.ZoneOffset this3056 G__3057)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.ZoneOffset" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.ZoneOffset this3058 ^java.time.temporal.TemporalField java-time-temporal-TemporalField3059] (.get this3058 java-time-temporal-TemporalField3059)))
(clojure.core/defn equals {:arglists (quote (["java.time.ZoneOffset" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.ZoneOffset this3060 ^java.lang.Object java-lang-Object3061] (.equals this3060 java-lang-Object3061)))
