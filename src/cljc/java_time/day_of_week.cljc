(ns cljc.java-time.day-of-week (:require [cljs.java-time.interop :as jti] #? (:cljs [java.time :refer [DayOfWeek]])) (:refer-clojure :exclude [get range format min max next name resolve]) #? (:clj (:import [java.time DayOfWeek])))
(def saturday (. java.time.DayOfWeek -SATURDAY))
(def thursday (. java.time.DayOfWeek -THURSDAY))
(def friday (. java.time.DayOfWeek -FRIDAY))
(def wednesday (. java.time.DayOfWeek -WEDNESDAY))
(def sunday (. java.time.DayOfWeek -SUNDAY))
(def monday (. java.time.DayOfWeek -MONDAY))
(def tuesday (. java.time.DayOfWeek -TUESDAY))
(clojure.core/defn range {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.time.temporal.ValueRange [^java.time.DayOfWeek this2618 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2619] (.range this2618 java-time-temporal-TemporalField2619)))
(clojure.core/defn values {:arglists (quote ([]))} (^"java.lang.Class" [] (. java.time.DayOfWeek values)))
(clojure.core/defn value-of {:arglists (quote (["java.lang.String"] ["java.lang.Class" "java.lang.String"]))} (^java.time.DayOfWeek [^java.lang.String java-lang-String2620] (. java.time.DayOfWeek valueOf java-lang-String2620)) (^java.lang.Enum [^java.lang.Class java-lang-Class2621 ^java.lang.String java-lang-String2622] (. java.time.DayOfWeek valueOf java-lang-Class2621 java-lang-String2622)))
(clojure.core/defn of {:arglists (quote (["int"]))} (^java.time.DayOfWeek [^java.lang.Integer int2623] (. java.time.DayOfWeek of int2623)))
(clojure.core/defn ordinal {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this2624] (.ordinal this2624)))
(clojure.core/defn plus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this2625 ^long long2626] (.plus this2625 long2626)))
(clojure.core/defn query {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalQuery"]))} (^java.lang.Object [^java.time.DayOfWeek this2627 ^java.time.temporal.TemporalQuery java-time-temporal-TemporalQuery2628] (.query this2627 java-time-temporal-TemporalQuery2628)))
(clojure.core/defn to-string {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this2629] (.toString this2629)))
(clojure.core/defn minus {:arglists (quote (["java.time.DayOfWeek" "long"]))} (^java.time.DayOfWeek [^java.time.DayOfWeek this2630 ^long long2631] (.minus this2630 long2631)))
(clojure.core/defn get-display-name {:arglists (quote (["java.time.DayOfWeek" "java.time.format.TextStyle" "java.util.Locale"]))} (^java.lang.String [^java.time.DayOfWeek this2632 ^java.time.format.TextStyle java-time-format-TextStyle2633 ^java.util.Locale java-util-Locale2634] (jti/getter displayName this2632 java-time-format-TextStyle2633 java-util-Locale2634)))
(clojure.core/defn get-value {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this2635] (jti/getter value this2635)))
(clojure.core/defn name {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.String [^java.time.DayOfWeek this2636] (.name this2636)))
(clojure.core/defn get-long {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^long [^java.time.DayOfWeek this2637 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2638] (.getLong this2637 java-time-temporal-TemporalField2638)))
(clojure.core/defn get-declaring-class {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Class [^java.time.DayOfWeek this2639] (jti/getter declaringClass this2639)))
(clojure.core/defn from {:arglists (quote (["java.time.temporal.TemporalAccessor"]))} (^java.time.DayOfWeek [^java.time.temporal.TemporalAccessor java-time-temporal-TemporalAccessor2640] (. java.time.DayOfWeek from java-time-temporal-TemporalAccessor2640)))
(clojure.core/defn is-supported {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Boolean [^java.time.DayOfWeek this2641 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2642] (.isSupported this2641 java-time-temporal-TemporalField2642)))
(clojure.core/defn hash-code {:arglists (quote (["java.time.DayOfWeek"]))} (^java.lang.Integer [^java.time.DayOfWeek this2643] (.hashCode this2643)))
(clojure.core/defn adjust-into {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.Temporal"]))} (^java.time.temporal.Temporal [^java.time.DayOfWeek this2644 ^java.time.temporal.Temporal java-time-temporal-Temporal2645] (.adjustInto this2644 java-time-temporal-Temporal2645)))
(clojure.core/defn compare-to {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"] ["java.time.DayOfWeek" "java.lang.Enum"]))} (^java.lang.Integer [this2646 G__2647] #? (:cljs (.compareTo ^java.time.DayOfWeek this2646 G__2647) :clj (clojure.core/cond (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Object") G__2647)) (clojure.core/let [G__2647 ^"java.lang.Object" G__2647] (.compareTo ^java.time.DayOfWeek this2646 G__2647)) (clojure.core/and (clojure.core/instance? (java.lang.Class/forName "java.lang.Enum") G__2647)) (clojure.core/let [G__2647 ^"java.lang.Enum" G__2647] (.compareTo ^java.time.DayOfWeek this2646 G__2647)) :else (throw (java.lang.IllegalArgumentException. "no corresponding java.time method with these args"))))))
(clojure.core/defn get {:arglists (quote (["java.time.DayOfWeek" "java.time.temporal.TemporalField"]))} (^java.lang.Integer [^java.time.DayOfWeek this2648 ^java.time.temporal.TemporalField java-time-temporal-TemporalField2649] (.get this2648 java-time-temporal-TemporalField2649)))
(clojure.core/defn equals {:arglists (quote (["java.time.DayOfWeek" "java.lang.Object"]))} (^java.lang.Boolean [^java.time.DayOfWeek this2650 ^java.lang.Object java-lang-Object2651] (.equals this2650 java-lang-Object2651)))
